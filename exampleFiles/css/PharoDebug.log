THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:09.868773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

TextMorph>>fillStyle
	Receiver: a TextMorph(704277504)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		owner: 	a PanelMorph(281312768)
		submorphs: 	#()
		fullBounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		color: 	Color black
		extension: 	a MorphExtension (342205440) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'right'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	Color transparent
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


TextMorph(Morph)>>privateMoveBy:
	Receiver: a TextMorph(704277504)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
		fill: 	nil
		border: 	nil
	Receiver's instance variables: 
		bounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		owner: 	a PanelMorph(281312768)
		submorphs: 	#()
		fullBounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		color: 	Color black
		extension: 	a MorphExtension (342205440) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'right'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	Color transparent
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


TextMorph>>privateMoveBy:
	Receiver: a TextMorph(704277504)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
	Receiver's instance variables: 
		bounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		owner: 	a PanelMorph(281312768)
		submorphs: 	#()
		fullBounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		color: 	Color black
		extension: 	a MorphExtension (342205440) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'right'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	Color transparent
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


TextMorph(Morph)>>privateFullMoveBy:
	Receiver: a TextMorph(704277504)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
	Receiver's instance variables: 
		bounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		owner: 	a PanelMorph(281312768)
		submorphs: 	#()
		fullBounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		color: 	Color black
		extension: 	a MorphExtension (342205440) [locked]  [other:  (kmDispatcher -> a K...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'right'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	Color transparent
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


[ :each | each privateFullMoveBy: delta ] in PanelMorph(Morph)>>privateFullMoveBy:
	Receiver: a PanelMorph(281312768)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
		each: 	a TextMorph(704277504)
	Receiver's instance variables: 
		bounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		owner: 	a Morph(377701376)
		submorphs: 	an Array(a TextMorph(704277504))
		fullBounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		color: 	Color transparent
		extension: 	a MorphExtension (69127680) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


Array(SequenceableCollection)>>do:
	Receiver: an Array(a TextMorph(704277504))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each privateFullMoveBy: delta ]
		index: 	1
	Receiver's instance variables: 
an Array(a TextMorph(704277504))

PanelMorph(Morph)>>privateFullMoveBy:
	Receiver: a PanelMorph(281312768)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
	Receiver's instance variables: 
		bounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		owner: 	a Morph(377701376)
		submorphs: 	an Array(a TextMorph(704277504))
		fullBounds: 	(34.0@123647.0) corner: (60.0@123668.0)
		color: 	Color transparent
		extension: 	a MorphExtension (69127680) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


[ :each | each privateFullMoveBy: delta ] in Morph>>privateFullMoveBy:
	Receiver: a Morph(377701376)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
		each: 	a PanelMorph(281312768)
	Receiver's instance variables: 
		bounds: 	(34.0@123646.0) corner: (60.0@123669.0)
		owner: 	NodeMorph(a NodeModel with an Element)
		submorphs: 	an Array(a PanelMorph(281312768))
		fullBounds: 	(34.0@123646.0) corner: (60.0@123669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (799057920)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PanelMorph(281312768))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each privateFullMoveBy: delta ]
		index: 	1
	Receiver's instance variables: 
an Array(a PanelMorph(281312768))

Morph>>privateFullMoveBy:
	Receiver: a Morph(377701376)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
	Receiver's instance variables: 
		bounds: 	(34.0@123646.0) corner: (60.0@123669.0)
		owner: 	NodeMorph(a NodeModel with an Element)
		submorphs: 	an Array(a PanelMorph(281312768))
		fullBounds: 	(34.0@123646.0) corner: (60.0@123669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (799057920)


[ :each | each privateFullMoveBy: delta ] in MorphTreeNodeMorph(Morph)>>privateFullMoveBy:
	Receiver: NodeMorph(a NodeModel with an Element)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
		each: 	a Morph(377701376)
	Receiver's instance variables: 
		bounds: 	(0.0@123646.0) corner: (34.0@123669.0)
		owner: 	a MorphTreeTransformMorph(935212032)
		submorphs: 	an Array(a Morph(377701376))
		fullBounds: 	(0.0@123646.0) corner: (60.0@123669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (478006272)
		parent: 	NodeMorph(a NodeModel with an Element)
		index: 	3524
		indentLevel: 	1
		isExpanded: 	false
		complexContents: 	a NodeModel with an Element
		firstChild: 	nil
		container: 	a GLMPaginatedMorphTreeMorph(118851072)
		nextSibling: 	NodeMorph(a NodeModel with an Element)
		controls: 	an OrderedCollection(a Morph(377701376))
		lineColor: 	nil
		selected: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a Morph(377701376))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each privateFullMoveBy: delta ]
		index: 	1
	Receiver's instance variables: 
an Array(a Morph(377701376))

MorphTreeNodeMorph(Morph)>>privateFullMoveBy:
	Receiver: NodeMorph(a NodeModel with an Element)
	Arguments and temporary variables: 
		delta: 	(0.0@23.0)
	Receiver's instance variables: 
		bounds: 	(0.0@123646.0) corner: (34.0@123669.0)
		owner: 	a MorphTreeTransformMorph(935212032)
		submorphs: 	an Array(a Morph(377701376))
		fullBounds: 	(0.0@123646.0) corner: (60.0@123669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (478006272)
		parent: 	NodeMorph(a NodeModel with an Element)
		index: 	3524
		indentLevel: 	1
		isExpanded: 	false
		complexContents: 	a NodeModel with an Element
		firstChild: 	nil
		container: 	a GLMPaginatedMorphTreeMorph(118851072)
		nextSibling: 	NodeMorph(a NodeModel with an Element)
		controls: 	an OrderedCollection(a Morph(377701376))
		lineColor: 	nil
		selected: 	nil


MorphTreeNodeMorph(Morph)>>position:
	Receiver: NodeMorph(a NodeModel with an Element)
	Arguments and temporary variables: 
		aPoint: 	(0@123646.0)
		delta: 	(0.0@23.0)
		box: 	(0.0@123623.0) corner: (60.0@123646.0)
	Receiver's instance variables: 
		bounds: 	(0.0@123646.0) corner: (34.0@123669.0)
		owner: 	a MorphTreeTransformMorph(935212032)
		submorphs: 	an Array(a Morph(377701376))
		fullBounds: 	(0.0@123646.0) corner: (60.0@123669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (478006272)
		parent: 	NodeMorph(a NodeModel with an Element)
		index: 	3524
		indentLevel: 	1
		isExpanded: 	false
		complexContents: 	a NodeModel with an Element
		firstChild: 	nil
		container: 	a GLMPaginatedMorphTreeMorph(118851072)
		nextSibling: 	NodeMorph(a NodeModel with an Element)
		controls: 	an OrderedCollection(a Morph(377701376))
		lineColor: 	nil
		selected: 	nil


MorphTreeNodeMorph(Morph)>>bounds:
	Receiver: NodeMorph(a NodeModel with an Element)
	Arguments and temporary variables: 
		newBounds: 	(0@123646.0) corner: (34.0@123669.0)
		oldExtent: 	(34.0@23.0)
		newExtent: 	(34.0@23.0)
	Receiver's instance variables: 
		bounds: 	(0.0@123646.0) corner: (34.0@123669.0)
		owner: 	a MorphTreeTransformMorph(935212032)
		submorphs: 	an Array(a Morph(377701376))
		fullBounds: 	(0.0@123646.0) corner: (60.0@123669.0)
		color: 	Color transparent
		extension: 	a MorphExtension (478006272)
		parent: 	NodeMorph(a NodeModel with an Element)
		index: 	3524
		indentLevel: 	1
		isExpanded: 	false
		complexContents: 	a NodeModel with an Element
		firstChild: 	nil
		container: 	a GLMPaginatedMorphTreeMorph(118851072)
		nextSibling: 	NodeMorph(a NodeModel with an Element)
		controls: 	an OrderedCollection(a Morph(377701376))
		lineColor: 	nil
		selected: 	nil


[ :each | 
| h |
h := each height.
each index: idx.
each bounds: (p extent: each width @ h).
maxNodeWidth := maxNodeWidth max: each fullBounds width.
idx := idx + 1.
p := p + (0 @ h) ] in GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>adjustSubmorphPositionsOf:startIdx:startPos:
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 
		aCollection: 	an Array(NodeMorph(a NodeModel with an Element) NodeMorph(a NodeMo...etc...
		anIndex: 	1
		aStartPoint: 	(0@0)
		idx: 	3524
		p: 	(0@123646.0)
		each: 	NodeMorph(a NodeModel with an Element)
		h: 	23.0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(NodeMorph(a NodeModel with an Element) NodeMorph(a NodeModel with an Element) Nod...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
| h |
h := each height.
each index: idx.
each bounds: (p ext...etc...
		index: 	3524
	Receiver's instance variables: 
an Array(NodeMorph(a NodeModel with an Element) NodeMorph(a NodeModel with an Element) Nod...etc...

GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>adjustSubmorphPositionsOf:startIdx:startPos:
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 
		idx: 	3524
		p: 	(0@123646.0)
		aCollection: 	an Array(NodeMorph(a NodeModel with an Element) NodeMorph(a NodeMo...etc...
		anIndex: 	1
		aStartPoint: 	(0@0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>adjustSubmorphPositions
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>noteRemovalOfAll:
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection()
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


MorphTreeNodeMorph>>toggleExpandedState
	Receiver: NodeMorph(a NodeModel with an Element)
	Arguments and temporary variables: 
		toDelete: 	an OrderedCollection()
	Receiver's instance variables: 
		bounds: 	(0.0@101210.0) corner: (95.0@101233.0)
		owner: 	a MorphTreeTransformMorph(935212032)
		submorphs: 	an Array(a Morph(859247104))
		fullBounds: 	(0.0@101210.0) corner: (95.0@101233.0)
		color: 	Color transparent
		extension: 	a MorphExtension (616050688)
		parent: 	NodeMorph(a NodeModel with an Element)
		index: 	2988
		indentLevel: 	1
		isExpanded: 	true
		complexContents: 	a NodeModel with an Element
		firstChild: 	nil
		container: 	a GLMPaginatedMorphTreeMorph(118851072)
		nextSibling: 	NodeMorph(a NodeModel with an Element)
		controls: 	an OrderedCollection(a Morph(859247104))
		lineColor: 	nil
		selected: 	nil


GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>expand:to:
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 
		aMorph: 	NodeMorph(a NodeModel with an Element)
		level: 	5
		allChildren: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


[ :each | 
((each canExpand and: [ each isExpanded not ]) and: [ level > 0 ])
	ifTrue: [ self expand: each to: level - 1 ] ] in GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>expand:to:
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 
		aMorph: 	NodeMorph(a NodeModel with an Element)
		level: 	6
		allChildren: 	an OrderedCollection(NodeMorph(a NodeModel with an Element) NodeMo...etc...
		each: 	NodeMorph(a NodeModel with an Element)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(NodeMorph(a NodeModel with an Element) NodeMorph(a NodeModel with an ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
((each canExpand and: [ each isExpanded not ]) and: [ level ...etc...
		index: 	1494
	Receiver's instance variables: 
		array: 	an Array(NodeMorph(a NodeModel with an Element) NodeMorph(a NodeModel wi...etc...
		firstIndex: 	1
		lastIndex: 	3396


GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>expand:to:
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 
		aMorph: 	NodeMorph(a NodeModel with an Element)
		level: 	6
		allChildren: 	an OrderedCollection(NodeMorph(a NodeModel with an Element) NodeMo...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


[ :m | self expand: m to: aLevel ] in GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>expandAllTo:
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 
		aLevel: 	6
		m: 	NodeMorph(a NodeModel with an Element)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(NodeMorph(a NodeModel with an Element))
	Arguments and temporary variables: 
		aBlock: 	[ :m | self expand: m to: aLevel ]
		index: 	1
	Receiver's instance variables: 
an Array(NodeMorph(a NodeModel with an Element))

GLMPaginatedMorphTreeMorph(MorphTreeMorph)>>expandAllTo:
	Receiver: a GLMPaginatedMorphTreeMorph(118851072)
	Arguments and temporary variables: 
		aLevel: 	6
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	a PanelMorph(159600640)
		submorphs: 	an Array(a ScrollBar(201417728) a ScrollBar(797289984) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (829076992) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(797289984)
		scroller: 	a MorphTreeTransformMorph(935212032)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(201417728)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection()
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(353119232)
		notExpandedToggleImage: 	an ImageMorph(304408576)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(892652032)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with an Element)
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	990.0
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(482474496)
		stopStepping: 	nil


GLMMorphicTreeRenderer>>render:
	Receiver: a GLMMorphicTreeRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTreePresentation(id=764092928 title=Tree pane=a GLMPane(161...etc...
		container: 	a PanelMorph(159600640)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		treeMorph: 	a GLMPaginatedMorphTreeMorph(118851072)
		treeModel: 	a GLMTreeMorphModel


GLMMorphicTreeRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTreeRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTreePresentation(id=764092928 title=Tree pane=a GLMPane(161...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicListingRenderer
		methodDict: 	a MethodDictionary(#render:->GLMMorphicTreeRenderer>>#render: )
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTreeRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTreePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTreePresentation(id=764092928 title=Tree pane=a GLMPane(161...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(701204992)


GLMTreePresentation>>renderGlamorouslyOn:
	Receiver: a GLMTreePresentation(id=764092928 title=Tree pane=a GLMPane(161390592 4))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(161390592 4)
		title: 	'Tree'
		titleIcon: 	nil
		transformation: 	[ :x | x ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>tree
		initializationBlock: 	nil
		cachedDisplayedValue: 	an Element
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		format: 	[ :n | n name ifNil: [ n asString ] ifNotNil: [ n name ] ]
		icon: 	[ nil ]
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	nil
		allowsMultipleSelection: 	false
		allowsDeselection: 	false
		tagsStyle: 	nil
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	Color transparent
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	nil
		children: 	[ :n | n children ]
		rootsExpanded: 	nil
		allExpanded: 	nil
		expandLevel: 	6
		tagsBlock: 	nil
		tagsFilterBlock: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMTreePresentation(id=764092928 title=Tree pane=a GLMPane(16139...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(701204992)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:10.028773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

OrderedCollection(Collection)>>isEmpty
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>hasCustomDependencies:
	Receiver: a GLMBrickWidthTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickWidthTraverser

GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>markDirtyCustomDependency:inContext:
	Receiver: a GLMBrickWidthTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aContextBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickWidthTraverser

[ :each | self markDirtyCustomDependency: each inContext: aBrick ] in GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>markDirtyAround:inContext:
	Receiver: a GLMBrickWidthTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aContextBrick: 	nil
		each: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickWidthTraverser

OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMBrickWrapper)
	Arguments and temporary variables: 
		aBlock: 	[ :each | self markDirtyCustomDependency: each inContext: aBrick ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMBrickWrapper)
		firstIndex: 	1
		lastIndex: 	1


GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>markDirtyAround:inContext:
	Receiver: a GLMBrickWidthTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aContextBrick: 	nil
	Receiver's instance variables: 
a GLMBrickWidthTraverser

GLMBrickLayouter>>markDependent:
	Receiver: a GLMBrickLayouter
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickLayouter

GLMBrickLayouter>>layoutIn:
	Receiver: a GLMBrickLayouter
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickLayouter

GLMTabLabelBrick(GLMBrick)>>doLayout
	Receiver: a GLMTabLabelBrick(232633856)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection(a GLMBrick(355733504))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (219063296) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	nil
		normalLabel: 	a GLMBrick(355733504)
		selectedLabel: 	a GLMBrick(355733504)


GLMTabLabelBrick(GLMBrick)>>doLayoutForce
	Receiver: a GLMTabLabelBrick(232633856)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection(a GLMBrick(355733504))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (219063296) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	nil
		normalLabel: 	a GLMBrick(355733504)
		selectedLabel: 	a GLMBrick(355733504)


GLMTabLabelBrick(GLMBrick)>>addBrickBack:
	Receiver: a GLMTabLabelBrick(232633856)
	Arguments and temporary variables: 
		aBrick: 	a GLMBrick(355733504)
		result: 	a GLMBrick(355733504)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection(a GLMBrick(355733504))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (219063296) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	nil
		normalLabel: 	a GLMBrick(355733504)
		selectedLabel: 	a GLMBrick(355733504)


GLMTabLabelBrick>>beNormal
	Receiver: a GLMTabLabelBrick(232633856)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection(a GLMBrick(355733504))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (219063296) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	nil
		normalLabel: 	a GLMBrick(355733504)
		selectedLabel: 	a GLMBrick(355733504)


GLMTabLabelBrick>>selected:
	Receiver: a GLMTabLabelBrick(232633856)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection(a GLMBrick(355733504))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (219063296) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	nil
		normalLabel: 	a GLMBrick(355733504)
		selectedLabel: 	a GLMBrick(355733504)


GLMTabLabelBrick>>label:selected:
	Receiver: a GLMTabLabelBrick(232633856)
	Arguments and temporary variables: 
		aBrick: 	a GLMBrick(355733504)
		aSelectedBrick: 	a GLMBrick(355733504)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection(a GLMBrick(355733504))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (219063296) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	nil
		normalLabel: 	a GLMBrick(355733504)
		selectedLabel: 	a GLMBrick(355733504)


GLMTabLabelBrick>>label:
	Receiver: a GLMTabLabelBrick(232633856)
	Arguments and temporary variables: 
		aBrick: 	a GLMBrick(355733504)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an OrderedCollection(a GLMBrick(355733504))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (219063296) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	nil
		normalLabel: 	a GLMBrick(355733504)
		selectedLabel: 	a GLMBrick(355733504)


GLMTabSelectorBrick>>newLabelBrick:
	Receiver: a GLMTabSelectorBrick(705378304)
	Arguments and temporary variables: 
		aStringOrBrick: 	a GLMBrick(355733504)
	Receiver's instance variables: 
		bounds: 	(0.0@16.0) corner: (2.0@40.0)
		owner: 	a PanelMorph(687881216)
		submorphs: 	an Array(a GLMBrick(245143040))
		fullBounds: 	(0.0@16.0) corner: (2.0@40.0)
		color: 	Color transparent
		extension: 	a MorphExtension (172232192) [other:  (minHeight -> 24) (announcer -...etc...
		brickRoot: 	a GLMBrick(245143040)
		vResizing: 	#spaceFill
		hResizing: 	#spaceFill
		selectedIndex: 	nil
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		tabs: 	an OrderedCollection()


GLMTabSelectorBrick>>addTab:
	Receiver: a GLMTabSelectorBrick(705378304)
	Arguments and temporary variables: 
		aStringOrMorph: 	a GLMBrick(355733504)
	Receiver's instance variables: 
		bounds: 	(0.0@16.0) corner: (2.0@40.0)
		owner: 	a PanelMorph(687881216)
		submorphs: 	an Array(a GLMBrick(245143040))
		fullBounds: 	(0.0@16.0) corner: (2.0@40.0)
		color: 	Color transparent
		extension: 	a MorphExtension (172232192) [other:  (minHeight -> 24) (announcer -...etc...
		brickRoot: 	a GLMBrick(245143040)
		vResizing: 	#spaceFill
		hResizing: 	#spaceFill
		selectedIndex: 	nil
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		tabs: 	an OrderedCollection()


LazyTabGroupMorph(TabGroupMorph)>>addPage:label:
	Receiver: a LazyTabGroupMorph(827871744)
	Arguments and temporary variables: 
		aMorph: 	a LazyTabPage(5632)
		aStringOrMorph: 	a GLMBrick(355733504)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(98421760) a PanelMorph(687881216))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612648960)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(705378304)
		contentMorph: 	a PanelMorph(98421760)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(5632))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(684485120)
		headerMorph: 	a PanelMorph(687881216)
		tabSelectorWidth: 	nil


LazyTabGroupMorph>>addLazyPage:label:toolbar:action:
	Receiver: a LazyTabGroupMorph(827871744)
	Arguments and temporary variables: 
		aBlock: 	[ self renderObject: each ]
		aStringOrMorph: 	'Stack'
		aToolbar: 	a ToolDockingBarMorph(977935872)
		anActionMorphOrNil: 	nil
		newPage: 	a LazyTabPage(5632)
		label: 	a GLMBrick(355733504)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(98421760) a PanelMorph(687881216))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612648960)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(705378304)
		contentMorph: 	a PanelMorph(98421760)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(5632))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(684485120)
		headerMorph: 	a PanelMorph(687881216)
		tabSelectorWidth: 	nil


[ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	nil
		aPresentation: 	a GLMCompositePresentation(id=405865472 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=332669440 tit...etc...
		each: 	a GLMFastTablePresentation(id=332669440 title=Stack pane=a GLMPane(973459...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(827871744)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a GLMFastTablePresentation(id=332669440 title=Stack pane=a GLMPane(97...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMFastTablePresentation(id=332669440 title=Stack pane=a GLMP...etc...
		firstIndex: 	1
		lastIndex: 	1


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	nil
		aPresentation: 	a GLMCompositePresentation(id=405865472 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=332669440 tit...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(827871744)


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=405865472 title=nil pane=a GLMPane...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->GLMMorphicTabbedRenderer>...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=405865472 title=nil pane=...etc...
	Receiver's instance variables: 
		window: 	nil


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=405865472 title=nil pane=a GLMPane(973...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=405865472 title=nil pane=a GLMPane(973459456 stack))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(973459456 stack)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=675699712 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=332669440 tit...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=405865472 title=nil pane=a GLMPane(9...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=405865472 title=nil pane=a GLMPane(9734...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(795447808)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>renderContainerFor:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(973459456 stack)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(795447808)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>render:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(973459456 stack)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(795447808)
		contentMorph: 	nil


GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPane(973459456 stack)
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnMatchingPresentationChanged:->GLMMorphicPa...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPaneRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderPane:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(973459456 stack)
	Receiver's instance variables: 
		window: 	nil


GLMPane>>renderGlamorouslyOn:
	Receiver: a GLMPane(973459456 stack)
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMTabulator(id=750646272 title=nil pane=a GLMPane(722968064 root))
		name: 	#stack
		presentations: 	a GLMCompositePresentation(id=405865472 title=nil pane=a GLMPane...etc...
		ports: 	an OrderedCollection(Port (pane=#stack name=#entity value=a DebugSession...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	true
		cachedMatchingPresentations: 	an OrderedCollection(a GLMFastTablePresentation(id...etc...


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPane(973459456 stack)
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabulatorRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPane(973459456 stack)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer


[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBrowser paneNamed: each id) ]
	ifFalse: [ pane := GLMMorphic containerMorph.
		self
			renderCustomRow: each
			ofPane: aPane
			inUI: pane
			inBrowser: aBrowser.
		pane addPaneSplitters ].
pane
	layoutFrame:
		(LayoutFrame new
			topFraction: currentSpanPosition / totalSpans
				offset: currentOffset + self margin;
			leftFraction: 0 offset: 0;
			bottomFraction: (currentSpanPosition + each span) / totalSpans
				offset: currentOffset + each size - self margin;
			rightFraction: 1 offset: 0;
			yourself).
aMorph addMorphBack: pane.
currentSpanPosition := currentSpanPosition + each span.
currentOffset := currentOffset + each size ] in GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
	Receiver: a GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		aCell: 	a GLMCustomColumn
		aPane: 	a GLMPane(722968064 root)
		aMorph: 	a PanelMorph(877155328)
		aBrowser: 	a GLMTabulator(id=750646272 title=nil pane=a GLMPane(722968064 root))...etc...
		totalSpans: 	4
		index: 	1
		each: 	a GLMCustomRow
		pane: 	nil
		currentOffset: 	0
		currentSpanPosition: 	0
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer


OrderedCollection(SequenceableCollection)>>keysAndValuesDo:
	Receiver: an OrderedCollection(a GLMCustomRow a GLMCustomRow a GLMCustomRow)
	Arguments and temporary variables: 
		aBlock: 	[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBr...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMCustomRow a GLMCustomRow a GLMCustomRow nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	3


GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
	Receiver: a GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		pane: 	nil
		currentOffset: 	0
		currentSpanPosition: 	0
		aCell: 	a GLMCustomColumn
		aPane: 	a GLMPane(722968064 root)
		aMorph: 	a PanelMorph(877155328)
		aBrowser: 	a GLMTabulator(id=750646272 title=nil pane=a GLMPane(722968064 root))...etc...
		totalSpans: 	4
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer


GLMMorphicTabulatorRenderer>>render:
	Receiver: a GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		aBrowser: 	a GLMTabulator(id=750646272 title=nil pane=a GLMPane(722968064 root))...etc...
		container: 	a PanelMorph(877155328)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer



--- The full stack ---
OrderedCollection(Collection)>>isEmpty
GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>hasCustomDependencies:
GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>markDirtyCustomDependency:inContext:
[ :each | self markDirtyCustomDependency: each inContext: aBrick ] in GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>markDirtyAround:inContext:
OrderedCollection>>do:
GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>markDirtyAround:inContext:
GLMBrickLayouter>>markDependent:
GLMBrickLayouter>>layoutIn:
GLMTabLabelBrick(GLMBrick)>>doLayout
GLMTabLabelBrick(GLMBrick)>>doLayoutForce
GLMTabLabelBrick(GLMBrick)>>addBrickBack:
GLMTabLabelBrick>>beNormal
GLMTabLabelBrick>>selected:
GLMTabLabelBrick>>label:selected:
GLMTabLabelBrick>>label:
GLMTabSelectorBrick>>newLabelBrick:
GLMTabSelectorBrick>>addTab:
LazyTabGroupMorph(TabGroupMorph)>>addPage:label:
LazyTabGroupMorph>>addLazyPage:label:toolbar:action:
[ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
OrderedCollection>>do:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabulatorRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBrowser paneNamed: each id) ]
	ifFalse: [ pane := GLMMorphic containerMorph.
		self
			renderCustomRow: each
			ofPane: aPane
			inUI: pane
			inBrowser: aBrowser.
		pane addPaneSplitters ].
pane
	layoutFrame:
		(LayoutFrame new
			topFraction: currentSpanPosition / totalSpans
				offset: currentOffset + self margin;
			leftFraction: 0 offset: 0;
			bottomFraction: (currentSpanPosition + each span) / totalSpans
				offset: currentOffset + each size - self margin;
			rightFraction: 1 offset: 0;
			yourself).
aMorph addMorphBack: pane.
currentSpanPosition := currentSpanPosition + each span.
currentOffset := currentOffset + each size ] in GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
OrderedCollection(SequenceableCollection)>>keysAndValuesDo:
GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
GLMMorphicTabulatorRenderer>>render:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMMorphicTabulatorRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabulator:
GLMTabulator>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GTGenericStackDebugger(GLMCompositePresentation)>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicWindowRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicWindowRenderer>>render:
GLMMorphicWindowRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>open:
GTGenericStackDebugger(GLMCompositePresentation)>>openWith:
GTGenericStackDebugger(GLMCompositePresentation)>>open
GTGenericStackDebugger(GTMoldableDebugger)>>open
GTGenericStackDebugger>>openWithFullView
GTGenericStackDebugger class(GTMoldableDebugger class)>>openOn:withFullView:andNotification:
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ] in [ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSession signalDebuggerError: ex ] ] in MorphicUIManager>>debugProcess:context:label:fullView:notification:
BlockClosure>>on:do:
[ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSession signalDebuggerError: ex ] ] in MorphicUIManager>>debugProcess:context:label:fullView:notification:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:10.182773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

Margin>>initialize
	Receiver: a Margin top: nil left: nil bottom: nil right: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
		right: 	nil
		bottom: 	nil
		left: 	nil
		top: 	nil


Margin class(Behavior)>>new
	Receiver: Margin
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asMargin->Margin>>#asMargin #bottom->Margin>>#b...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Margin
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-BasicObjects'
		traitComposition: 	{}
		localSelectors: 	nil


Margin class>>fromNumber:
	Receiver: Margin
	Arguments and temporary variables: 
		aNumber: 	0
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#asMargin->Margin>>#asMargin #bottom->Margin>>#b...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Margin
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-BasicObjects'
		traitComposition: 	{}
		localSelectors: 	nil


SmallInteger(Number)>>asMargin
	Receiver: 0
	Arguments and temporary variables: 

	Receiver's instance variables: 
0

Rectangle>>insetBy:
	Receiver: (0@0) corner: (50@40)
	Arguments and temporary variables: 
		delta: 	0
	Receiver's instance variables: 
		origin: 	(0@0)
		corner: 	(50@40)


PanelMorph(Morph)>>innerBounds
	Receiver: a PanelMorph(284708864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a LazyTabGroupMorph(820063232)
		submorphs: 	an Array(a GLMTabSelectorBrick(253224960) a PanelMorph(716818944))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (193264128) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>clippingBounds
	Receiver: a PanelMorph(284708864)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a LazyTabGroupMorph(820063232)
		submorphs: 	an Array(a GLMTabSelectorBrick(253224960) a PanelMorph(716818944))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (193264128) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(284708864)
	Arguments and temporary variables: 
		aRectangle: 	(3.0@2.0) corner: (50@40)
		aMorph: 	a PanelMorph(716818944)
		damageRect: 	(3.0@2.0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a LazyTabGroupMorph(820063232)
		submorphs: 	an Array(a GLMTabSelectorBrick(253224960) a PanelMorph(716818944))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (193264128) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(716818944)
	Arguments and temporary variables: 
		aRectangle: 	(3.0@2.0) corner: (50@40)
		aMorph: 	a ToolDockingBarMorph(362663424)
		damageRect: 	(3.0@2.0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(2.0@0.0) corner: (52.0@40.0)
		owner: 	a PanelMorph(284708864)
		submorphs: 	an Array(a ToolDockingBarMorph(362663424))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (729338880) [sticky] 
		borderWidth: 	0
		borderColor: 	Color gray


ToolDockingBarMorph(Morph)>>invalidRect:from:
	Receiver: a ToolDockingBarMorph(362663424)
	Arguments and temporary variables: 
		aRectangle: 	(3.0@2.0) corner: (63.0@42.0)
		aMorph: 	a GLMPluggableButtonMorph(162430976)
		damageRect: 	(3.0@2.0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(716818944)
		submorphs: 	an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (565842432)
		borderWidth: 	0
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		originalColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		gradientRamp: 	nil
		fillsOwner: 	true
		avoidVisibleBordersAtEdge: 	true
		autoGradient: 	true
		selectedItem: 	nil
		activeSubMenu: 	nil


GLMPluggableButtonMorph(Morph)>>invalidRect:from:
	Receiver: a GLMPluggableButtonMorph(162430976)
	Arguments and temporary variables: 
		aRectangle: 	(3.0@2.0) corner: (63.0@42.0)
		aMorph: 	an AlignmentMorph(1059926016)
		damageRect: 	(3.0@2.0) corner: (63.0@42.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (63@42)
		owner: 	a ToolDockingBarMorph(362663424)
		submorphs: 	an Array(an AlignmentMorph(1059926016))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (800228352) [balloonText]  [other:  (noBorder -> tr...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Restart'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a GLMFastTablePresentation(id=825331200 title=Stack pane=a ...etc...
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(412748800)'Restart'
		iconMorph: 	an ImageMorph(697436160)
		iconPosition: 	#left
		lastState: 	false


AlignmentMorph(Morph)>>invalidRect:from:
	Receiver: an AlignmentMorph(1059926016)
	Arguments and temporary variables: 
		aRectangle: 	(3.0@2.0) corner: (63.0@42.0)
		aMorph: 	an AlignmentMorph(1059926016)
		damageRect: 	(3.0@2.0) corner: (63.0@42.0)
	Receiver's instance variables: 
		bounds: 	(3.0@2.0) corner: (53.0@42.0)
		owner: 	a GLMPluggableButtonMorph(162430976)
		submorphs: 	an Array(an ImageMorph(697436160) a LabelMorph(412748800)'Restart')
		fullBounds: 	(3.0@2.0) corner: (63.0@42.0)
		color: 	Color transparent
		extension: 	a MorphExtension (847555072)
		borderWidth: 	0
		borderColor: 	Color black


AlignmentMorph(Morph)>>invalidRect:
	Receiver: an AlignmentMorph(1059926016)
	Arguments and temporary variables: 
		damageRect: 	(3.0@2.0) corner: (63.0@42.0)
	Receiver's instance variables: 
		bounds: 	(3.0@2.0) corner: (53.0@42.0)
		owner: 	a GLMPluggableButtonMorph(162430976)
		submorphs: 	an Array(an ImageMorph(697436160) a LabelMorph(412748800)'Restart')
		fullBounds: 	(3.0@2.0) corner: (63.0@42.0)
		color: 	Color transparent
		extension: 	a MorphExtension (847555072)
		borderWidth: 	0
		borderColor: 	Color black


AlignmentMorph(Morph)>>changed
	Receiver: an AlignmentMorph(1059926016)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(3.0@2.0) corner: (53.0@42.0)
		owner: 	a GLMPluggableButtonMorph(162430976)
		submorphs: 	an Array(an ImageMorph(697436160) a LabelMorph(412748800)'Restart')
		fullBounds: 	(3.0@2.0) corner: (63.0@42.0)
		color: 	Color transparent
		extension: 	a MorphExtension (847555072)
		borderWidth: 	0
		borderColor: 	Color black


AlignmentMorph(Morph)>>extent:
	Receiver: an AlignmentMorph(1059926016)
	Arguments and temporary variables: 
		aPoint: 	(60.0@38)
		newExtent: 	(60@38)
	Receiver's instance variables: 
		bounds: 	(3.0@2.0) corner: (53.0@42.0)
		owner: 	a GLMPluggableButtonMorph(162430976)
		submorphs: 	an Array(an ImageMorph(697436160) a LabelMorph(412748800)'Restart')
		fullBounds: 	(3.0@2.0) corner: (63.0@42.0)
		color: 	Color transparent
		extension: 	a MorphExtension (847555072)
		borderWidth: 	0
		borderColor: 	Color black


AlignmentMorph(Morph)>>bounds:
	Receiver: an AlignmentMorph(1059926016)
	Arguments and temporary variables: 
		newBounds: 	(3@2) corner: (63.0@40)
		oldExtent: 	(50@40)
		newExtent: 	(60.0@38)
	Receiver's instance variables: 
		bounds: 	(3.0@2.0) corner: (53.0@42.0)
		owner: 	a GLMPluggableButtonMorph(162430976)
		submorphs: 	an Array(an ImageMorph(697436160) a LabelMorph(412748800)'Restart')
		fullBounds: 	(3.0@2.0) corner: (63.0@42.0)
		color: 	Color transparent
		extension: 	a MorphExtension (847555072)
		borderWidth: 	0
		borderColor: 	Color black


AlignmentMorph(Morph)>>layoutInBounds:
	Receiver: an AlignmentMorph(1059926016)
	Arguments and temporary variables: 
		cellBounds: 	(3@2) corner: (63.0@40)
		box: 	(3@2) corner: (63.0@40)
		aSymbol: 	#center
	Receiver's instance variables: 
		bounds: 	(3.0@2.0) corner: (53.0@42.0)
		owner: 	a GLMPluggableButtonMorph(162430976)
		submorphs: 	an Array(an ImageMorph(697436160) a LabelMorph(412748800)'Restart')
		fullBounds: 	(3.0@2.0) corner: (63.0@42.0)
		color: 	Color transparent
		extension: 	a MorphExtension (847555072)
		borderWidth: 	0
		borderColor: 	Color black


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		aMorph: 	a GLMPluggableButtonMorph(162430976)
		newBounds: 	(3@2) corner: (60@40)
		inset: 	0
		extent: 	(57@38)
		block: 	[ :m | 
| sizeX props sizeY |
props := m layoutProperties ifNil: [ m ].
...etc...
		posX: 	3
		posY: 	2
		centering: 	nil
		extraPerCell: 	21.0
		amount: 	21
		minX: 	0
		minY: 	0
		maxX: 	1073741823
		maxY: 	1073741823
		sum: 	1
		first: 	a LayoutCell
		width: 	60.0
		vFill: 	true
		extra: 	21.0
		n: 	1
		last: 	0
		cell: 	a LayoutCell
		size: 	(60.0@17)
		height: 	38
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		aMorph: 	a GLMPluggableButtonMorph(162430976)
		box: 	(3@2) corner: (60@40)
		cells: 	nil
		arrangement: 	nil
		horizontal: 	nil
		newBounds: 	(3@2) corner: (60@40)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


GLMPluggableButtonMorph(Morph)>>doLayoutIn:
	Receiver: a GLMPluggableButtonMorph(162430976)
	Arguments and temporary variables: 
		layoutBounds: 	(3@2) corner: (60@40)
		box: 	nil
		priorBounds: 	(0@0) corner: (63@42)
		layout: 	a TableLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (63@42)
		owner: 	a ToolDockingBarMorph(362663424)
		submorphs: 	an Array(an AlignmentMorph(1059926016))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (800228352) [balloonText]  [other:  (noBorder -> tr...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Restart'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a GLMFastTablePresentation(id=825331200 title=Stack pane=a ...etc...
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(412748800)'Restart'
		iconMorph: 	an ImageMorph(697436160)
		iconPosition: 	#left
		lastState: 	false


[ self doLayoutIn: self layoutBounds ] in GLMPluggableButtonMorph(Morph)>>computeFullBounds
	Receiver: a GLMPluggableButtonMorph(162430976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (63@42)
		owner: 	a ToolDockingBarMorph(362663424)
		submorphs: 	an Array(an AlignmentMorph(1059926016))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (800228352) [balloonText]  [other:  (noBorder -> tr...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Restart'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a GLMFastTablePresentation(id=825331200 title=Stack pane=a ...etc...
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(412748800)'Restart'
		iconMorph: 	an ImageMorph(697436160)
		iconPosition: 	#left
		lastState: 	false


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	GLMPluggableButtonMorph(Morph)>>computeFullBounds
		startpc: 	37
		numArgs: 	0


GLMPluggableButtonMorph(Morph)>>computeFullBounds
	Receiver: a GLMPluggableButtonMorph(162430976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (63@42)
		owner: 	a ToolDockingBarMorph(362663424)
		submorphs: 	an Array(an AlignmentMorph(1059926016))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (800228352) [balloonText]  [other:  (noBorder -> tr...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Restart'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a GLMFastTablePresentation(id=825331200 title=Stack pane=a ...etc...
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(412748800)'Restart'
		iconMorph: 	an ImageMorph(697436160)
		iconPosition: 	#left
		lastState: 	false


GLMPluggableButtonMorph(Morph)>>fullBounds
	Receiver: a GLMPluggableButtonMorph(162430976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (63@42)
		owner: 	a ToolDockingBarMorph(362663424)
		submorphs: 	an Array(an AlignmentMorph(1059926016))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (800228352) [balloonText]  [other:  (noBorder -> tr...etc...
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMGenericAction
		label: 	'Restart'
		icon: 	Form(16x16x32)
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#morphicActOn:
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a GLMFastTablePresentation(id=825331200 title=Stack pane=a ...etc...
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		lastColor: 	nil
		labelMorph: 	a LabelMorph(412748800)'Restart'
		iconMorph: 	an ImageMorph(697436160)
		iconPosition: 	#left
		lastState: 	false


[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in ToolDockingBarMorph(Morph)>>submorphBounds
	Receiver: a ToolDockingBarMorph(362663424)
	Arguments and temporary variables: 
		m: 	a GLMPluggableButtonMorph(162430976)
		subBox: 	nil
		box: 	(0@0) corner: (62@42)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(716818944)
		submorphs: 	an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (565842432)
		borderWidth: 	0
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		originalColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		gradientRamp: 	nil
		fillsOwner: 	true
		avoidVisibleBordersAtEdge: 	true
		autoGradient: 	true
		selectedItem: 	nil
		activeSubMenu: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMorph(162430976) a GLMPl...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
	...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMorph(162430976) a GLMPl...etc...

ToolDockingBarMorph(Morph)>>submorphBounds
	Receiver: a ToolDockingBarMorph(362663424)
	Arguments and temporary variables: 
		box: 	(0@0) corner: (62@42)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(716818944)
		submorphs: 	an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (565842432)
		borderWidth: 	0
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		originalColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		gradientRamp: 	nil
		fillsOwner: 	true
		avoidVisibleBordersAtEdge: 	true
		autoGradient: 	true
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph(Morph)>>privateFullBounds
	Receiver: a ToolDockingBarMorph(362663424)
	Arguments and temporary variables: 
		box: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(716818944)
		submorphs: 	an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (565842432)
		borderWidth: 	0
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		originalColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		gradientRamp: 	nil
		fillsOwner: 	true
		avoidVisibleBordersAtEdge: 	true
		autoGradient: 	true
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph(Morph)>>changed
	Receiver: a ToolDockingBarMorph(362663424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(716818944)
		submorphs: 	an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (565842432)
		borderWidth: 	0
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		originalColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		gradientRamp: 	nil
		fillsOwner: 	true
		avoidVisibleBordersAtEdge: 	true
		autoGradient: 	true
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph(Morph)>>fillStyle:
	Receiver: a ToolDockingBarMorph(362663424)
	Arguments and temporary variables: 
		aFillStyle: 	a SolidFillStyle(Color transparent)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(716818944)
		submorphs: 	an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (565842432)
		borderWidth: 	0
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		originalColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		gradientRamp: 	nil
		fillsOwner: 	true
		avoidVisibleBordersAtEdge: 	true
		autoGradient: 	true
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph>>updateColor
	Receiver: a ToolDockingBarMorph(362663424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(716818944)
		submorphs: 	an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (565842432)
		borderWidth: 	0
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		originalColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		gradientRamp: 	nil
		fillsOwner: 	true
		avoidVisibleBordersAtEdge: 	true
		autoGradient: 	true
		selectedItem: 	nil
		activeSubMenu: 	nil


ToolDockingBarMorph(DockingBarMorph)>>adoptPaneColor:
	Receiver: a ToolDockingBarMorph(362663424)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(716818944)
		submorphs: 	an Array(a GLMPluggableButtonMorph(529461760) a GLMPluggableButtonMo...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (565842432)
		borderWidth: 	0
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		originalColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		gradientRamp: 	nil
		fillsOwner: 	true
		avoidVisibleBordersAtEdge: 	true
		autoGradient: 	true
		selectedItem: 	nil
		activeSubMenu: 	nil


[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(716818944)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		m: 	a ToolDockingBarMorph(362663424)
	Receiver's instance variables: 
		bounds: 	(2.0@0.0) corner: (52.0@40.0)
		owner: 	a PanelMorph(284708864)
		submorphs: 	an Array(a ToolDockingBarMorph(362663424))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (729338880) [sticky] 
		borderWidth: 	0
		borderColor: 	Color gray


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ToolDockingBarMorph(362663424))
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
		index: 	1
	Receiver's instance variables: 
an Array(a ToolDockingBarMorph(362663424))

PanelMorph(Morph)>>submorphsDo:
	Receiver: a PanelMorph(716818944)
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
	Receiver's instance variables: 
		bounds: 	(2.0@0.0) corner: (52.0@40.0)
		owner: 	a PanelMorph(284708864)
		submorphs: 	an Array(a ToolDockingBarMorph(362663424))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (729338880) [sticky] 
		borderWidth: 	0
		borderColor: 	Color gray


PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(716818944)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
	Receiver's instance variables: 
		bounds: 	(2.0@0.0) corner: (52.0@40.0)
		owner: 	a PanelMorph(284708864)
		submorphs: 	an Array(a ToolDockingBarMorph(362663424))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (729338880) [sticky] 
		borderWidth: 	0
		borderColor: 	Color gray


PanelMorph>>adoptPaneColor:
	Receiver: a PanelMorph(716818944)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
	Receiver's instance variables: 
		bounds: 	(2.0@0.0) corner: (52.0@40.0)
		owner: 	a PanelMorph(284708864)
		submorphs: 	an Array(a ToolDockingBarMorph(362663424))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (729338880) [sticky] 
		borderWidth: 	0
		borderColor: 	Color gray


[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
	Receiver: a PanelMorph(284708864)
	Arguments and temporary variables: 
		paneColor: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		m: 	a PanelMorph(716818944)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a LazyTabGroupMorph(820063232)
		submorphs: 	an Array(a GLMTabSelectorBrick(253224960) a PanelMorph(716818944))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (193264128) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


Array(SequenceableCollection)>>do:
	Receiver: an Array(a GLMTabSelectorBrick(253224960) a PanelMorph(716818944))
	Arguments and temporary variables: 
		aBlock: 	[ :m | m adoptPaneColor: paneColor ]
		index: 	2
	Receiver's instance variables: 
an Array(a GLMTabSelectorBrick(253224960) a PanelMorph(716818944))


--- The full stack ---
Margin>>initialize
Margin class(Behavior)>>new
Margin class>>fromNumber:
SmallInteger(Number)>>asMargin
Rectangle>>insetBy:
PanelMorph(Morph)>>innerBounds
PanelMorph(Morph)>>clippingBounds
PanelMorph(Morph)>>invalidRect:from:
PanelMorph(Morph)>>invalidRect:from:
ToolDockingBarMorph(Morph)>>invalidRect:from:
GLMPluggableButtonMorph(Morph)>>invalidRect:from:
AlignmentMorph(Morph)>>invalidRect:from:
AlignmentMorph(Morph)>>invalidRect:
AlignmentMorph(Morph)>>changed
AlignmentMorph(Morph)>>extent:
AlignmentMorph(Morph)>>bounds:
AlignmentMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
GLMPluggableButtonMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in GLMPluggableButtonMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
GLMPluggableButtonMorph(Morph)>>computeFullBounds
GLMPluggableButtonMorph(Morph)>>fullBounds
[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in ToolDockingBarMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
ToolDockingBarMorph(Morph)>>submorphBounds
ToolDockingBarMorph(Morph)>>privateFullBounds
ToolDockingBarMorph(Morph)>>changed
ToolDockingBarMorph(Morph)>>fillStyle:
ToolDockingBarMorph>>updateColor
ToolDockingBarMorph(DockingBarMorph)>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphsDo:
PanelMorph(Morph)>>adoptPaneColor:
PanelMorph>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in PanelMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PanelMorph(Morph)>>submorphsDo:
PanelMorph(Morph)>>adoptPaneColor:
PanelMorph>>adoptPaneColor:
[ :m | m adoptPaneColor: paneColor ] in LazyTabGroupMorph(Morph)>>adoptPaneColor:
Array(SequenceableCollection)>>do:
LazyTabGroupMorph(Morph)>>submorphsDo:
LazyTabGroupMorph(Morph)>>adoptPaneColor:
LazyTabGroupMorph(TabGroupMorph)>>adoptPaneColor:
LazyTabGroupMorph>>updatePageIndex:
LazyTabGroupMorph(TabGroupMorph)>>update:
LazyTabGroupMorph(Object)>>update:with:
MorphChangedWithArguments>>deliverTo:
LazyTabGroupMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
GLMTabSelectorBrick(Morph)>>doAnnounce:
GLMTabSelectorBrick(Morph)>>changed:with:
GLMTabSelectorBrick>>selectedIndex:
LazyTabGroupMorph(TabGroupMorph)>>selectedPageIndex:
THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:10.310773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

Array(SequenceableCollection)>>do:
	Receiver: an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
	...etc...
	Receiver's instance variables: 
an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))

PanelMorph(Morph)>>submorphBounds
	Receiver: a PanelMorph(801198080)
	Arguments and temporary variables: 
		box: 	(0.0@16.0) corner: (2.0@40.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1017422336) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>adjustLayoutBounds
	Receiver: a PanelMorph(801198080)
	Arguments and temporary variables: 
		hFit: 	#spaceFill
		vFit: 	#shrinkWrap
		box: 	(0@0) corner: (50@40)
		myExtent: 	(50@40)
		extent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1017422336) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(801198080)
	Arguments and temporary variables: 
		layoutBounds: 	(0@0) corner: (50@40)
		box: 	nil
		priorBounds: 	(0@0) corner: (50@40)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1017422336) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(801198080)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1017422336) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	PanelMorph(Morph)>>computeFullBounds
		startpc: 	37
		numArgs: 	0


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(801198080)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1017422336) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(801198080)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1017422336) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>clipSubmorphs:
	Receiver: a PanelMorph(801198080)
	Arguments and temporary variables: 
		aBool: 	true
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1017422336) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


LazyTabGroupMorph>>headerMorph:
	Receiver: a LazyTabGroupMorph(843089920)
	Arguments and temporary variables: 
		anObject: 	a PanelMorph(801198080)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (837926400)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(951950848)
		contentMorph: 	a PanelMorph(908747776)
		pageMorphs: 	an OrderedCollection()
		announcer: 	nil
		toolbarMorph: 	a PanelMorph(688489472)
		headerMorph: 	a PanelMorph(801198080)
		tabSelectorWidth: 	nil


LazyTabGroupMorph>>initialize
	Receiver: a LazyTabGroupMorph(843089920)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (837926400)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(951950848)
		contentMorph: 	a PanelMorph(908747776)
		pageMorphs: 	an OrderedCollection()
		announcer: 	nil
		toolbarMorph: 	a PanelMorph(688489472)
		headerMorph: 	a PanelMorph(801198080)
		tabSelectorWidth: 	nil


LazyTabGroupMorph class(Behavior)>>new
	Receiver: LazyTabGroupMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TabGroupMorph
		methodDict: 	a MethodDictionary(#addLazyPage:label:->LazyTabGroupMorph>>#addLazy...etc...
		format: 	65552
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LazyTabGroupMorph
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	nil
		aPresentation: 	a GLMCompositePresentation(id=505414144 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=67728384 titl...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=505414144 title=nil pane=a GLMPane...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->GLMMorphicTabbedRenderer>...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=505414144 title=nil pane=...etc...
	Receiver's instance variables: 
		window: 	nil


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=505414144 title=nil pane=a GLMPane(127...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=505414144 title=nil pane=a GLMPane(127713280 stack))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(127713280 stack)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=148381184 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=67728384 titl...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=505414144 title=nil pane=a GLMPane(1...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=505414144 title=nil pane=a GLMPane(1277...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(580581376)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>renderContainerFor:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(127713280 stack)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(580581376)
		contentMorph: 	nil


GLMMorphicPaneRenderer>>render:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(127713280 stack)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(580581376)
		contentMorph: 	nil


GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPane(127713280 stack)
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnMatchingPresentationChanged:->GLMMorphicPa...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPaneRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderPane:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(127713280 stack)
	Receiver's instance variables: 
		window: 	nil


GLMPane>>renderGlamorouslyOn:
	Receiver: a GLMPane(127713280 stack)
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		browser: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 root))
		name: 	#stack
		presentations: 	a GLMCompositePresentation(id=505414144 title=nil pane=a GLMPane...etc...
		ports: 	an OrderedCollection(Port (pane=#stack name=#entity value=a DebugSession...etc...
		lastActivePresentation: 	nil
		allowedToNotePresentationsChanged: 	true
		cachedMatchingPresentations: 	an OrderedCollection(a GLMFastTablePresentation(id...etc...


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPane(127713280 stack)
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabulatorRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPane(127713280 stack)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer


[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBrowser paneNamed: each id) ]
	ifFalse: [ pane := GLMMorphic containerMorph.
		self
			renderCustomRow: each
			ofPane: aPane
			inUI: pane
			inBrowser: aBrowser.
		pane addPaneSplitters ].
pane
	layoutFrame:
		(LayoutFrame new
			topFraction: currentSpanPosition / totalSpans
				offset: currentOffset + self margin;
			leftFraction: 0 offset: 0;
			bottomFraction: (currentSpanPosition + each span) / totalSpans
				offset: currentOffset + each size - self margin;
			rightFraction: 1 offset: 0;
			yourself).
aMorph addMorphBack: pane.
currentSpanPosition := currentSpanPosition + each span.
currentOffset := currentOffset + each size ] in GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
	Receiver: a GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		aCell: 	a GLMCustomColumn
		aPane: 	a GLMPane(998705664 root)
		aMorph: 	a PanelMorph(517666816)
		aBrowser: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 root))...etc...
		totalSpans: 	4
		index: 	1
		each: 	a GLMCustomRow
		pane: 	nil
		currentOffset: 	0
		currentSpanPosition: 	0
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer


OrderedCollection(SequenceableCollection)>>keysAndValuesDo:
	Receiver: an OrderedCollection(a GLMCustomRow a GLMCustomRow a GLMCustomRow)
	Arguments and temporary variables: 
		aBlock: 	[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBr...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMCustomRow a GLMCustomRow a GLMCustomRow nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	3


GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
	Receiver: a GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		pane: 	nil
		currentOffset: 	0
		currentSpanPosition: 	0
		aCell: 	a GLMCustomColumn
		aPane: 	a GLMPane(998705664 root)
		aMorph: 	a PanelMorph(517666816)
		aBrowser: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 root))...etc...
		totalSpans: 	4
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer


GLMMorphicTabulatorRenderer>>render:
	Receiver: a GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		aBrowser: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 root))...etc...
		container: 	a PanelMorph(517666816)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer


GLMMorphicTabulatorRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabulatorRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 r...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicBrowserRenderer
		methodDict: 	a MethodDictionary(#margin->GLMMorphicTabulatorRenderer>>#margin #r...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabulatorRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabulator:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aBrowser: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 root))...etc...
	Receiver's instance variables: 
		window: 	nil


GLMTabulator>>renderGlamorouslyOn:
	Receiver: a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 root))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(998705664 root)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :x | x ]
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GTGenericStackDebugger(GLMCompositePresentation)>>tabulator
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		transmissions: 	an OrderedCollection(GLMTransmission (origins=an OrderedCollecti...etc...
		panes: 	an OrderedCollection(a GLMPane(127713280 stack) a GLMPane(747930624 code...etc...
		initialExtent: 	nil
		watcherPane: 	nil
		cell: 	a GLMCustomColumn


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 roo...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 root))...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTabulator(id=742996480 title=nil pane=a GLMPane(998705664 r...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GTGenericStackDebugger(id=514775552 title=User Interrupt pane=...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->GLMMorphicTabbedRenderer>...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GTGenericStackDebugger(id=514775552 title=User Interr...etc...
	Receiver's instance variables: 
		window: 	nil



--- The full stack ---
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphBounds
PanelMorph(Morph)>>adjustLayoutBounds
PanelMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
PanelMorph(Morph)>>clipSubmorphs:
LazyTabGroupMorph>>headerMorph:
LazyTabGroupMorph>>initialize
LazyTabGroupMorph class(Behavior)>>new
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabulatorRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBrowser paneNamed: each id) ]
	ifFalse: [ pane := GLMMorphic containerMorph.
		self
			renderCustomRow: each
			ofPane: aPane
			inUI: pane
			inBrowser: aBrowser.
		pane addPaneSplitters ].
pane
	layoutFrame:
		(LayoutFrame new
			topFraction: currentSpanPosition / totalSpans
				offset: currentOffset + self margin;
			leftFraction: 0 offset: 0;
			bottomFraction: (currentSpanPosition + each span) / totalSpans
				offset: currentOffset + each size - self margin;
			rightFraction: 1 offset: 0;
			yourself).
aMorph addMorphBack: pane.
currentSpanPosition := currentSpanPosition + each span.
currentOffset := currentOffset + each size ] in GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
OrderedCollection(SequenceableCollection)>>keysAndValuesDo:
GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
GLMMorphicTabulatorRenderer>>render:
GLMMorphicTabulatorRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabulator:
GLMTabulator>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMTabbedArrangement>>renderGlamorouslyOn:
GTGenericStackDebugger(GLMCompositePresentation)>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicWindowRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicWindowRenderer>>render:
GLMMorphicWindowRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>open:
GTGenericStackDebugger(GLMCompositePresentation)>>openWith:
GTGenericStackDebugger(GLMCompositePresentation)>>open
GTGenericStackDebugger(GTMoldableDebugger)>>open
GTGenericStackDebugger>>openWithFullView
GTGenericStackDebugger class(GTMoldableDebugger class)>>openOn:withFullView:andNotification:
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ] in [ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSession signalDebuggerError: ex ] ] in MorphicUIManager>>debugProcess:context:label:fullView:notification:
BlockClosure>>on:do:
[ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSession signalDebuggerError: ex ] ] in MorphicUIManager>>debugProcess:context:label:fullView:notification:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:10.492773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

Array(SequenceableCollection)>>do:
	Receiver: an Array(a FreeTypeFace<0xC0EB758>[Source Sans Pro Regular] a FreeTypeFace<0xC0EB758>[Sour...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :inst | 
(inst fileContentsExternalMemoryBytes = aByteArray
	and: [ i...etc...
	Receiver's instance variables: 
an Array(a FreeTypeFace<0xC0EB758>[Source Sans Pro Regular] a FreeTypeFace<0xC0EB758>[Sour...etc...

FreeTypeFace class(Behavior)>>allInstancesDo:
	Receiver: FreeTypeFace
	Arguments and temporary variables: 
		aBlock: 	[ :inst | 
(inst fileContentsExternalMemoryBytes = aByteArray
	and: [ i...etc...
		instances: 	an Array(a FreeTypeFace<0xC0EB758>[Source Sans Pro Regular] a FreeTy...etc...
		inst: 	nil
		next: 	nil
	Receiver's instance variables: 
		superclass: 	FT2Face
		methodDict: 	a MethodDictionary(#actAsExecutor->FreeTypeFace>>#actAsExecutor #cr...etc...
		format: 	65567
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Fonts'
		traitComposition: 	{}
		localSelectors: 	nil


FreeTypeFace class>>fromBytes:index:
	Receiver: FreeTypeFace
	Arguments and temporary variables: 
		aByteArray: 	#[0 1 0 0 0 19 1 0 0 4 0 48 66 65 83 69 101 30 93 189 0 4 98 228 0 ...etc...
		anInteger: 	0
		newFace: 	nil
	Receiver's instance variables: 
		superclass: 	FT2Face
		methodDict: 	a MethodDictionary(#actAsExecutor->FreeTypeFace>>#actAsExecutor #cr...etc...
		format: 	65567
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeFace
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Fonts'
		traitComposition: 	{}
		localSelectors: 	nil


FreeTypeFont class>>fromBytes:pointSize:index:
	Receiver: FreeTypeFont
	Arguments and temporary variables: 
		aByteArray: 	#[0 1 0 0 0 19 1 0 0 4 0 48 66 65 83 69 101 30 93 189 0 4 98 228 0 ...etc...
		anInteger: 	8
		i: 	0
	Receiver's instance variables: 
		superclass: 	AbstractFont
		methodDict: 	a MethodDictionary(#asFreetypeFont->FreeTypeFont>>#asFreetypeFont #...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeFont
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Fonts'
		traitComposition: 	{}
		localSelectors: 	nil


FreeTypeFont class>>forLogicalFont:fileInfo:
	Receiver: FreeTypeFont
	Arguments and temporary variables: 
		aLogicalFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointS...etc...
		aFreeTypeFileInfoAbstract: 	{embedded}(293956 bytes )[0] Source Sans Pro - Regul...etc...
		pointSize: 	8
		index: 	0
	Receiver's instance variables: 
		superclass: 	AbstractFont
		methodDict: 	a MethodDictionary(#asFreetypeFont->FreeTypeFont>>#asFreetypeFont #...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeFont
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Fonts'
		traitComposition: 	{}
		localSelectors: 	nil


FreeTypeFontProvider>>fontFor:familyName:
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 
		aLogicalFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointS...etc...
		familyName: 	'Source Sans Pro'
		info: 	{embedded}(293956 bytes )[0] Source Sans Pro - Regular - SourceSansPro-Re...etc...
		answer: 	nil
		simulatedSqueakEmphasis: 	nil
		needsSimulatedBold: 	nil
		needsSimulatedSlant: 	nil
		squeakBoldEmphasis: 	nil
		squeakItalicEmphasis: 	nil
	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection({embedded}(293956 bytes )[0] Source Sans Pro - ...etc...
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary('Source Code Pro'->FreeTypeFontFamily 'Source Code Pro' ...etc...
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


[ :p | 
| answer |
(answer := p fontFor: aLogicalFont familyName: familyName)
	ifNotNil: [ ^ answer ] ] in [ :familyName | 
fontProviders
	do: [ :p | 
		| answer |
		(answer := p fontFor: aLogicalFont familyName: familyName)
			ifNotNil: [ ^ answer ] ].
textStyle := TextStyle named: familyName.
textStyle
	ifNotNil: [ font := textStyle fontOfPointSize: aLogicalFont pointSize.
		font ifNotNil: [ ^ font emphasized: aLogicalFont emphasis ] ] ] in LogicalFontManager>>bestFontFor:whenFindingAlternativeIgnoreAll:
	Receiver: a LogicalFontManager
	Arguments and temporary variables: 
		aLogicalFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointS...etc...
		ignoreSet: 	a Set()
		textStyle: 	nil
		font: 	nil
		familyName: 	'Source Sans Pro'
		p: 	a FreeTypeFontProvider
		answer: 	nil
	Receiver's instance variables: 
		fontProviders: 	an OrderedCollection(a FreeTypeFontProvider)


OrderedCollection>>do:
	Receiver: an OrderedCollection(a FreeTypeFontProvider)
	Arguments and temporary variables: 
		aBlock: 	[ :p | 
| answer |
(answer := p fontFor: aLogicalFont familyName: famil...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a FreeTypeFontProvider nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


[ :familyName | 
fontProviders
	do: [ :p | 
		| answer |
		(answer := p fontFor: aLogicalFont familyName: familyName)
			ifNotNil: [ ^ answer ] ].
textStyle := TextStyle named: familyName.
textStyle
	ifNotNil: [ font := textStyle fontOfPointSize: aLogicalFont pointSize.
		font ifNotNil: [ ^ font emphasized: aLogicalFont emphasis ] ] ] in LogicalFontManager>>bestFontFor:whenFindingAlternativeIgnoreAll:
	Receiver: a LogicalFontManager
	Arguments and temporary variables: 
		aLogicalFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointS...etc...
		ignoreSet: 	a Set()
		textStyle: 	nil
		font: 	nil
		familyName: 	'Source Sans Pro'
	Receiver's instance variables: 
		fontProviders: 	an OrderedCollection(a FreeTypeFontProvider)


Array(SequenceableCollection)>>do:
	Receiver: #('Source Sans Pro')
	Arguments and temporary variables: 
		aBlock: 	[ :familyName | 
fontProviders
	do: [ :p | 
		| answer |
		(answer := p...etc...
		index: 	1
	Receiver's instance variables: 
#('Source Sans Pro')

LogicalFontManager>>bestFontFor:whenFindingAlternativeIgnoreAll:
	Receiver: a LogicalFontManager
	Arguments and temporary variables: 
		textStyle: 	nil
		font: 	nil
		aLogicalFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointS...etc...
		ignoreSet: 	a Set()
	Receiver's instance variables: 
		fontProviders: 	an OrderedCollection(a FreeTypeFontProvider)


LogicalFontManager>>bestFontFor:
	Receiver: a LogicalFontManager
	Arguments and temporary variables: 
		aLogicalFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointS...etc...
	Receiver's instance variables: 
		fontProviders: 	an OrderedCollection(a FreeTypeFontProvider)


LogicalFont>>findRealFont
	Receiver: a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
 realFont: nil wei...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		realFont: 	nil
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	8
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	nil
		italicDerivative: 	nil
		boldItalicDerivative: 	nil


LogicalFont>>realFont
	Receiver: a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
 realFont: nil wei...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		realFont: 	nil
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	8
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	nil
		italicDerivative: 	nil
		boldItalicDerivative: 	nil


LogicalFont>>widthOfString:
	Receiver: a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
 realFont: nil wei...etc...
	Arguments and temporary variables: 
		aString: 	'implicit'
	Receiver's instance variables: 
		realFont: 	nil
		emphasis: 	nil
		familyName: 	'Source Sans Pro'
		fallbackFamilyNames: 	nil
		pointSize: 	8
		stretchValue: 	5
		weightValue: 	400
		slantValue: 	0
		derivatives: 	nil
		boldDerivative: 	nil
		italicDerivative: 	nil
		boldItalicDerivative: 	nil


StringMorph>>measureContents
	Receiver: a StringMorph(314265600)'implicit'
	Arguments and temporary variables: 
		f: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
 rea...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
 ...etc...
		emphasis: 	0
		contents: 	'implicit'
		hasFocus: 	false
		backgroundColor: 	Color transparent


StringMorph>>fitContents
	Receiver: a StringMorph(314265600)'implicit'
	Arguments and temporary variables: 
		newBounds: 	nil
		boundsChanged: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
 ...etc...
		emphasis: 	0
		contents: 	'implicit'
		hasFocus: 	false
		backgroundColor: 	Color transparent


StringMorph>>contents:
	Receiver: a StringMorph(314265600)'implicit'
	Arguments and temporary variables: 
		newContents: 	'implicit'
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
 ...etc...
		emphasis: 	0
		contents: 	'implicit'
		hasFocus: 	false
		backgroundColor: 	Color transparent


StringMorph>>initWithContents:font:emphasis:
	Receiver: a StringMorph(314265600)'implicit'
	Arguments and temporary variables: 
		aString: 	'implicit'
		aFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
...etc...
		emphasisCode: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	nil
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
 ...etc...
		emphasis: 	0
		contents: 	'implicit'
		hasFocus: 	false
		backgroundColor: 	Color transparent


StringMorph class>>contents:font:emphasis:
	Receiver: StringMorph
	Arguments and temporary variables: 
		aString: 	'implicit'
		aFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
...etc...
		emphasisCode: 	0
	Receiver's instance variables: 
		superclass: 	Morph
		methodDict: 	a MethodDictionary(#acceptContents->StringMorph>>#acceptContents #a...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{MenuItemMorph. IndentingListItemMorph. EmbossedStringMorph. LabelM...etc...
		name: 	#StringMorph
		classPool: 	a Dictionary(#EditableStringMorph->false )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Base-Basic'
		traitComposition: 	TAbleToRotate
		localSelectors: 	a Set(#widthToDisplayInList: #fullBounds #stringColor #contents...etc...
		announcer: 	nil


StringMorph class>>contents:font:
	Receiver: StringMorph
	Arguments and temporary variables: 
		aString: 	'implicit'
		aFont: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 8
...etc...
	Receiver's instance variables: 
		superclass: 	Morph
		methodDict: 	a MethodDictionary(#acceptContents->StringMorph>>#acceptContents #a...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{MenuItemMorph. IndentingListItemMorph. EmbossedStringMorph. LabelM...etc...
		name: 	#StringMorph
		classPool: 	a Dictionary(#EditableStringMorph->false )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Base-Basic'
		traitComposition: 	TAbleToRotate
		localSelectors: 	a Set(#widthToDisplayInList: #fullBounds #stringColor #contents...etc...
		announcer: 	nil


GLMMorphic class>>morphElement:
	Receiver: GLMMorphic
	Arguments and temporary variables: 
		anObject: 	'implicit'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphic
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphic class>>togglingButtonLabelled:pressed:style:
	Receiver: GLMMorphic
	Arguments and temporary variables: 
		anObject: 	'implicit'
		aBoolean: 	false
		aSymbol: 	#grayRoundedButton
		button: 	a SimpleButtonMorph(594502144)
		oldLabel: 	a StringMorph(630399488)'Flash'
		m: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphic
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMTreeMorphNodeModel>>buttonForTag:filter:
	Receiver: a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472)...etc...
	Arguments and temporary variables: 
		each: 	'implicit'
		filter: 	'implicit'
		button: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(NodeMorph(a NodeModel with 'self'->an Array(a GLM...etc...
		announceur: 	nil
		item: 	'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472)...etc...
		model: 	nil
		parentNode: 	nil
		contents: 	nil
		containerTree: 	a GLMTreeMorphModel
		onSelection: 	nil


[ :each :index | 
tagMorphs
	addLast:
		(self
			buttonForTag: each
			filter: (tagsFilter at: index ifAbsentPut: [ each ])) ] in GLMTreeMorphNodeModel>>tagMorphsFrom:
	Receiver: a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472)...etc...
	Arguments and temporary variables: 
		aTagProvider: 	a GLMTableColumn
		tagMorphs: 	an OrderedCollection()
		tags: 	an OrderedCollection('implicit')
		tagsFilter: 	an OrderedCollection('implicit')
		each: 	'implicit'
		index: 	1
	Receiver's instance variables: 
		dependents: 	a DependentsArray(NodeMorph(a NodeModel with 'self'->an Array(a GLM...etc...
		announceur: 	nil
		item: 	'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472)...etc...
		model: 	nil
		parentNode: 	nil
		contents: 	nil
		containerTree: 	a GLMTreeMorphModel
		onSelection: 	nil


OrderedCollection(SequenceableCollection)>>withIndexDo:
	Receiver: an OrderedCollection('implicit')
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :each :index | 
tagMorphs
	addLast:
		(self
			buttonFo...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	#('implicit' nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1


GLMTreeMorphNodeModel>>tagMorphsFrom:
	Receiver: a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472)...etc...
	Arguments and temporary variables: 
		aTagProvider: 	a GLMTableColumn
		tagMorphs: 	an OrderedCollection()
		tags: 	an OrderedCollection('implicit')
		tagsFilter: 	an OrderedCollection('implicit')
	Receiver's instance variables: 
		dependents: 	a DependentsArray(NodeMorph(a NodeModel with 'self'->an Array(a GLM...etc...
		announceur: 	nil
		item: 	'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472)...etc...
		model: 	nil
		parentNode: 	nil
		contents: 	nil
		containerTree: 	a GLMTreeMorphModel
		onSelection: 	nil


GLMTreeMorphNodeModel>>rowMorphForColumn:
	Receiver: a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472)...etc...
	Arguments and temporary variables: 
		contentMorph: 	a StringMorph(83511808)''
		aGlamourColumn: 	a GLMTableColumn
		rowElements: 	nil
		tagMorphs: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(NodeMorph(a NodeModel with 'self'->an Array(a GLM...etc...
		announceur: 	nil
		item: 	'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(688489472)...etc...
		model: 	nil
		parentNode: 	nil
		contents: 	nil
		containerTree: 	a GLMTreeMorphModel
		onSelection: 	nil


GLMMorphTreeColumn>>rowMorphFor:
	Receiver: a GLMMorphTreeColumn
	Arguments and temporary variables: 
		aNodeMorph: 	a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) ...etc...
		rowMorph: 	nil
		cont: 	nil
	Receiver's instance variables: 
		header: 	a MorphTreeColumnButton(332319744)
		container: 	a GLMPaginatedResizableMorphTreeMorph(767248384)
		currentWidth: 	75
		rowMorphGetSelector: 	nil
		shrinkWrap: 	nil
		color: 	nil
		isPotentialDropTarget: 	nil
		resizable: 	nil
		glamourColumn: 	a GLMTableColumn


[ :col | 
| v |
v := col rowMorphFor: complexContents.
controls add: v.
col -> v ] in MorphTreeNodeMorph>>buildRowMorph
	Receiver: NodeMorph(a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(...etc...
	Arguments and temporary variables: 
		rowControls: 	nil
		colAndControls: 	nil
		col: 	a GLMMorphTreeColumn
		v: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (581790208)
		parent: 	nil
		index: 	nil
		indentLevel: 	0
		isExpanded: 	false
		complexContents: 	a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950...etc...
		firstChild: 	nil
		container: 	a GLMPaginatedResizableMorphTreeMorph(767248384)
		nextSibling: 	nil
		controls: 	an OrderedCollection()
		lineColor: 	nil
		selected: 	nil


OrderedCollection>>collect:
	Receiver: an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMorphTreeColumn)
	Arguments and temporary variables: 
		aBlock: 	[ :col | 
| v |
v := col rowMorphFor: complexContents.
controls add: v....etc...
		newCollection: 	an OrderedCollection()
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMorphTreeColumn)...etc...
		firstIndex: 	1
		lastIndex: 	3


MorphTreeNodeMorph>>buildRowMorph
	Receiver: NodeMorph(a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(...etc...
	Arguments and temporary variables: 
		rowControls: 	nil
		colAndControls: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (581790208)
		parent: 	nil
		index: 	nil
		indentLevel: 	0
		isExpanded: 	false
		complexContents: 	a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950...etc...
		firstChild: 	nil
		container: 	a GLMPaginatedResizableMorphTreeMorph(767248384)
		nextSibling: 	nil
		controls: 	an OrderedCollection()
		lineColor: 	nil
		selected: 	nil


MorphTreeNodeMorph>>initRow
	Receiver: NodeMorph(a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (581790208)
		parent: 	nil
		index: 	nil
		indentLevel: 	0
		isExpanded: 	false
		complexContents: 	a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950...etc...
		firstChild: 	nil
		container: 	a GLMPaginatedResizableMorphTreeMorph(767248384)
		nextSibling: 	nil
		controls: 	an OrderedCollection()
		lineColor: 	nil
		selected: 	nil


MorphTreeNodeMorph>>initWithContents:prior:forList:indentLevel:
	Receiver: NodeMorph(a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a PanelMorph(...etc...
	Arguments and temporary variables: 
		anObject: 	a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a ...etc...
		priorMorph: 	nil
		hostList: 	a GLMPaginatedResizableMorphTreeMorph(767248384)
		newLevel: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (581790208)
		parent: 	nil
		index: 	nil
		indentLevel: 	0
		isExpanded: 	false
		complexContents: 	a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950...etc...
		firstChild: 	nil
		container: 	a GLMPaginatedResizableMorphTreeMorph(767248384)
		nextSibling: 	nil
		controls: 	an OrderedCollection()
		lineColor: 	nil
		selected: 	nil


[ :item :idx | 
priorMorph := self indentingItemClass new
	initWithContents: item
	prior: priorMorph
	forList: self
	indentLevel: newIndent.
firstAddition ifNil: [ firstAddition := priorMorph ].
morphList add: priorMorph.
"Was this row expanded ? if true -> expand it
			again "
((item hasEquivalentIn: expandedItems) or: [ priorMorph isExpanded ])
	ifTrue: [ priorMorph isExpanded: true.
		priorMorph
			addChildrenForList: self
			addingTo: morphList
			withExpandedItems: expandedItems ] ] in GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addMorphsTo:from:withExpandedItems:atLevel:
	Receiver: a GLMPaginatedResizableMorphTreeMorph(767248384)
	Arguments and temporary variables: 
		morphList: 	an OrderedCollection()
		aCollection: 	an OrderedCollection(a NodeModel with 'self'->an Array(a GLMTabSel...etc...
		expandedItems: 	#()
		newIndent: 	0
		priorMorph: 	nil
		firstAddition: 	nil
		item: 	a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a Pane...etc...
		idx: 	1
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(694196224) a ScrollBar(81041920) a MorphTreeChu...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (567454208) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(81041920)
		scroller: 	a MorphTreeTransformMorph(892694528)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(694196224)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(231757824) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(692689920)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->an Array(a GLMTabSelect...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(534394368)
		stopStepping: 	nil


OrderedCollection(SequenceableCollection)>>withIndexDo:
	Receiver: an OrderedCollection(a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :item :idx | 
priorMorph := self indentingItemClass new...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(9519508...etc...
		firstIndex: 	1
		lastIndex: 	4


OrderedCollection(SequenceableCollection)>>doWithIndex:
	Receiver: an OrderedCollection(a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(951950848) a ...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :item :idx | 
priorMorph := self indentingItemClass new...etc...
	Receiver's instance variables: 
		array: 	an Array(a NodeModel with 'self'->an Array(a GLMTabSelectorBrick(9519508...etc...
		firstIndex: 	1
		lastIndex: 	4


GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addMorphsTo:from:withExpandedItems:atLevel:
	Receiver: a GLMPaginatedResizableMorphTreeMorph(767248384)
	Arguments and temporary variables: 
		priorMorph: 	nil
		firstAddition: 	nil
		morphList: 	an OrderedCollection()
		aCollection: 	an OrderedCollection(a NodeModel with 'self'->an Array(a GLMTabSel...etc...
		expandedItems: 	#()
		newIndent: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(694196224) a ScrollBar(81041920) a MorphTreeChu...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (567454208) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(81041920)
		scroller: 	a MorphTreeTransformMorph(892694528)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(694196224)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(231757824) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(692689920)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->an Array(a GLMTabSelect...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(534394368)
		stopStepping: 	nil


GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addSubmorphsFromNodeList:previouslyExpanded:
	Receiver: a GLMPaginatedResizableMorphTreeMorph(767248384)
	Arguments and temporary variables: 
		aNodeList: 	an OrderedCollection(a NodeModel with 'self'->an Array(a GLMTabSelec...etc...
		expandedNodeList: 	#()
		morphList: 	an OrderedCollection()
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(694196224) a ScrollBar(81041920) a MorphTreeChu...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (567454208) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(81041920)
		scroller: 	a MorphTreeTransformMorph(892694528)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(694196224)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(231757824) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(692689920)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->an Array(a GLMTabSelect...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(534394368)
		stopStepping: 	nil



--- The full stack ---
Array(SequenceableCollection)>>do:
FreeTypeFace class(Behavior)>>allInstancesDo:
FreeTypeFace class>>fromBytes:index:
FreeTypeFont class>>fromBytes:pointSize:index:
FreeTypeFont class>>forLogicalFont:fileInfo:
FreeTypeFontProvider>>fontFor:familyName:
[ :p | 
| answer |
(answer := p fontFor: aLogicalFont familyName: familyName)
	ifNotNil: [ ^ answer ] ] in [ :familyName | 
fontProviders
	do: [ :p | 
		| answer |
		(answer := p fontFor: aLogicalFont familyName: familyName)
			ifNotNil: [ ^ answer ] ].
textStyle := TextStyle named: familyName.
textStyle
	ifNotNil: [ font := textStyle fontOfPointSize: aLogicalFont pointSize.
		font ifNotNil: [ ^ font emphasized: aLogicalFont emphasis ] ] ] in LogicalFontManager>>bestFontFor:whenFindingAlternativeIgnoreAll:
OrderedCollection>>do:
[ :familyName | 
fontProviders
	do: [ :p | 
		| answer |
		(answer := p fontFor: aLogicalFont familyName: familyName)
			ifNotNil: [ ^ answer ] ].
textStyle := TextStyle named: familyName.
textStyle
	ifNotNil: [ font := textStyle fontOfPointSize: aLogicalFont pointSize.
		font ifNotNil: [ ^ font emphasized: aLogicalFont emphasis ] ] ] in LogicalFontManager>>bestFontFor:whenFindingAlternativeIgnoreAll:
Array(SequenceableCollection)>>do:
LogicalFontManager>>bestFontFor:whenFindingAlternativeIgnoreAll:
LogicalFontManager>>bestFontFor:
LogicalFont>>findRealFont
LogicalFont>>realFont
LogicalFont>>widthOfString:
StringMorph>>measureContents
StringMorph>>fitContents
StringMorph>>contents:
StringMorph>>initWithContents:font:emphasis:
StringMorph class>>contents:font:emphasis:
StringMorph class>>contents:font:
GLMMorphic class>>morphElement:
GLMMorphic class>>togglingButtonLabelled:pressed:style:
GLMTreeMorphNodeModel>>buttonForTag:filter:
[ :each :index | 
tagMorphs
	addLast:
		(self
			buttonForTag: each
			filter: (tagsFilter at: index ifAbsentPut: [ each ])) ] in GLMTreeMorphNodeModel>>tagMorphsFrom:
OrderedCollection(SequenceableCollection)>>withIndexDo:
GLMTreeMorphNodeModel>>tagMorphsFrom:
GLMTreeMorphNodeModel>>rowMorphForColumn:
GLMMorphTreeColumn>>rowMorphFor:
[ :col | 
| v |
v := col rowMorphFor: complexContents.
controls add: v.
col -> v ] in MorphTreeNodeMorph>>buildRowMorph
OrderedCollection>>collect:
MorphTreeNodeMorph>>buildRowMorph
MorphTreeNodeMorph>>initRow
MorphTreeNodeMorph>>initWithContents:prior:forList:indentLevel:
[ :item :idx | 
priorMorph := self indentingItemClass new
	initWithContents: item
	prior: priorMorph
	forList: self
	indentLevel: newIndent.
firstAddition ifNil: [ firstAddition := priorMorph ].
morphList add: priorMorph.
"Was this row expanded ? if true -> expand it
			again "
((item hasEquivalentIn: expandedItems) or: [ priorMorph isExpanded ])
	ifTrue: [ priorMorph isExpanded: true.
		priorMorph
			addChildrenForList: self
			addingTo: morphList
			withExpandedItems: expandedItems ] ] in GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addMorphsTo:from:withExpandedItems:atLevel:
OrderedCollection(SequenceableCollection)>>withIndexDo:
OrderedCollection(SequenceableCollection)>>doWithIndex:
GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addMorphsTo:from:withExpandedItems:atLevel:
GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addSubmorphsFromNodeList:previouslyExpanded:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addSubmorphsFromNodeList
GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>buildContents
GLMPaginatedResizableMorphTreeMorph(PaginatedMorphTreeMorph)>>buildContents
GLMMorphicTableRenderer(GLMMorphicListingRenderer)>>treeMorphFor:and:
GLMMorphicTableRenderer(GLMMorphicListingRenderer)>>render:
GLMMorphicTableRenderer>>render:
GLMMorphicTableRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTablePresentation:
GLMTablePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabulatorRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBrowser paneNamed: each id) ]
	ifFalse: [ pane := GLMMorphic containerMorph.
		self
			renderCustomRow: each
			ofPane: aPane
			inUI: pane
			inBrowser: aBrowser.
		pane addPaneSplitters ].
pane
	layoutFrame:
		(LayoutFrame new
			topFraction: currentSpanPosition / totalSpans
				offset: currentOffset + self margin;
			leftFraction: 0 offset: 0;
			bottomFraction: (currentSpanPosition + each span) / totalSpans
				offset: currentOffset + each size - self margin;
			rightFraction: 1 offset: 0;
			yourself).
aMorph addMorphBack: pane.
currentSpanPosition := currentSpanPosition + each span.
currentOffset := currentOffset + each size ] in GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
OrderedCollection(SequenceableCollection)>>keysAndValuesDo:
GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
GLMMorphicTabulatorRenderer>>render:
GLMMorphicTabulatorRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabulator:
GLMTabulator>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GTDebuggerVariablesBrowser(GLMCompositePresentation)>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
LazyTabPage>>actualPageMorph
LazyTabGroupMorph>>pageAt:
LazyTabGroupMorph>>updatePageIndex:
LazyTabGroupMorph(TabGroupMorph)>>update:
LazyTabGroupMorph(Object)>>update:with:
MorphChangedWithArguments>>deliverTo:
LazyTabGroupMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:10.741773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

SmallInteger(Magnitude)>>min:
	Receiver: 40
	Arguments and temporary variables: 
		aMagnitude: 	35.0
	Receiver's instance variables: 
40

Rectangle>>intersect:ifNone:
	Receiver: (5.0@28.0) corner: (32.0@35.0)
	Arguments and temporary variables: 
		aRectangle: 	(0@0) corner: (50@40)
		aBlock: 	[ ^ self ]
		aPoint: 	(50@40)
		left: 	5.0
		right: 	32.0
		top: 	28.0
		bottom: 	nil
	Receiver's instance variables: 
		origin: 	(5.0@28.0)
		corner: 	(32.0@35.0)


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(396027904)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (32.0@35.0)
		aMorph: 	a PanelMorph(989694976)
		damageRect: 	(5.0@28.0) corner: (32.0@35.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a GLMSystemWindow(472630784)
		submorphs: 	an Array(a ProportionalSplitterMorph(1037852160) a ProportionalSplit...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (249086976) [sticky] 
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(989694976)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (32.0@35.0)
		aMorph: 	a LazyTabGroupMorph(959713280)
		damageRect: 	(5.0@28.0) corner: (32.0@35.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(396027904)
		submorphs: 	an Array(a LazyTabGroupMorph(959713280))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (155181568) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


LazyTabGroupMorph(Morph)>>invalidRect:from:
	Receiver: a LazyTabGroupMorph(959713280)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (32.0@35.0)
		aMorph: 	a PanelMorph(18260480)
		damageRect: 	(5.0@28.0) corner: (32.0@35.0)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(989694976)
		submorphs: 	an Array(a PanelMorph(18260480) a PanelMorph(891232256))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (242619392)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(710180352)
		contentMorph: 	a PanelMorph(18260480)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(287598080))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(752745472)
		headerMorph: 	a PanelMorph(891232256)
		tabSelectorWidth: 	nil


PanelMorph(Morph)>>invalidRect:from:
	Receiver: a PanelMorph(18260480)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (32.0@35.0)
		aMorph: 	a RubScrolledTextMorph(567515136)
		damageRect: 	(5.0@28.0) corner: (32.0@35.0)
	Receiver's instance variables: 
		bounds: 	(0.0@23.0) corner: (145.0@40.0)
		owner: 	a LazyTabGroupMorph(959713280)
		submorphs: 	an Array(a RubScrolledTextMorph(567515136))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (182032896) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


RubScrolledTextMorph(Morph)>>invalidRect:from:
	Receiver: a RubScrolledTextMorph(567515136)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (32.0@58.0)
		aMorph: 	a RubTextScrollPane(336964096)
		damageRect: 	(5.0@28.0) corner: (32.0@35.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a PanelMorph(18260480)
		submorphs: 	an Array(a RubTextScrollPane(336964096) a RubAdornmentDisplayer(4449...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (677157888) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(336964096)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(444946432))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubTextScrollPane(Morph)>>invalidRect:from:
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (32.0@58.0)
		aMorph: 	a TransformWithLayoutMorph(406795776)
		damageRect: 	(5.0@28.0) corner: (32.0@58.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


TransformWithLayoutMorph(Morph)>>invalidRect:from:
	Receiver: a TransformWithLayoutMorph(406795776)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (32.0@58.0)
		aMorph: 	a TransformWithLayoutMorph(406795776)
		damageRect: 	(5.0@28.0) corner: (32.0@58.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (32.0@58.0)
		owner: 	a RubTextScrollPane(336964096)
		submorphs: 	an Array(a RubEditingArea(569725440))
		fullBounds: 	(5.0@28.0) corner: (32.0@58.0)
		color: 	Color transparent
		extension: 	a MorphExtension (820163072)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5.0@10.0))
		smoothing: 	1
		localBounds: 	nil


TransformWithLayoutMorph(TransformMorph)>>invalidRect:from:
	Receiver: a TransformWithLayoutMorph(406795776)
	Arguments and temporary variables: 
		damageRect: 	(5.0@28.0) corner: (32.0@58.0)
		aMorph: 	a TransformWithLayoutMorph(406795776)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (32.0@58.0)
		owner: 	a RubTextScrollPane(336964096)
		submorphs: 	an Array(a RubEditingArea(569725440))
		fullBounds: 	(5.0@28.0) corner: (32.0@58.0)
		color: 	Color transparent
		extension: 	a MorphExtension (820163072)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5.0@10.0))
		smoothing: 	1
		localBounds: 	nil


TransformWithLayoutMorph(Morph)>>invalidRect:
	Receiver: a TransformWithLayoutMorph(406795776)
	Arguments and temporary variables: 
		damageRect: 	(5.0@28.0) corner: (32.0@58.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (32.0@58.0)
		owner: 	a RubTextScrollPane(336964096)
		submorphs: 	an Array(a RubEditingArea(569725440))
		fullBounds: 	(5.0@28.0) corner: (32.0@58.0)
		color: 	Color transparent
		extension: 	a MorphExtension (820163072)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5.0@10.0))
		smoothing: 	1
		localBounds: 	nil


TransformWithLayoutMorph(Morph)>>changed
	Receiver: a TransformWithLayoutMorph(406795776)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (32.0@58.0)
		owner: 	a RubTextScrollPane(336964096)
		submorphs: 	an Array(a RubEditingArea(569725440))
		fullBounds: 	(5.0@28.0) corner: (32.0@58.0)
		color: 	Color transparent
		extension: 	a MorphExtension (820163072)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5.0@10.0))
		smoothing: 	1
		localBounds: 	nil


TransformWithLayoutMorph(TransformMorph)>>offset:
	Receiver: a TransformWithLayoutMorph(406795776)
	Arguments and temporary variables: 
		newOffset: 	(0@38.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (32.0@58.0)
		owner: 	a RubTextScrollPane(336964096)
		submorphs: 	an Array(a RubEditingArea(569725440))
		fullBounds: 	(5.0@28.0) corner: (32.0@58.0)
		color: 	Color transparent
		extension: 	a MorphExtension (820163072)
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-5.0@10.0))
		smoothing: 	1
		localBounds: 	nil


RubTextScrollPane(GeneralScrollPane)>>hScrollbarValue:
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 
		scrollValue: 	0.0
		r: 	0
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


[ super hScrollbarValue: scrollValue ] in RubTextScrollPane>>hScrollbarValue:
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 
		scrollValue: 	0.0
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubTextScrollPane>>handleScrollerOffsetChange:
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 
		aBlock: 	[ super hScrollbarValue: scrollValue ]
		prevOffset: 	(1.0@38.0)
		ret: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubTextScrollPane>>hScrollbarValue:
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 
		scrollValue: 	0.0
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubScrollBar(Slider)>>setValue:
	Receiver: a RubScrollBar(622927872)
	Arguments and temporary variables: 
		newValue: 	0
	Receiver's instance variables: 
		bounds: 	(19.0@27.0) corner: (61.0@40.0)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(507670528) a Morph(466568192) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (78827008) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(336964096)
		slider: 	a BorderedMorph(507670528)
		value: 	0.0
		setValueSelector: 	#hScrollbarValue:
		sliderShadow: 	a BorderedMorph(922392064)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(1036471296)
		downButton: 	a BorderedMorph(659998720)
		pagingArea: 	a Morph(466568192)
		scrollDelta: 	0
		pageDelta: 	0
		interval: 	1.0
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubScrollBar(GeneralScrollBar)>>setValue:
	Receiver: a RubScrollBar(622927872)
	Arguments and temporary variables: 
		newValue: 	0
	Receiver's instance variables: 
		bounds: 	(19.0@27.0) corner: (61.0@40.0)
		owner: 	nil
		submorphs: 	an Array(a BorderedMorph(507670528) a Morph(466568192) a BorderedMor...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.96 g: 0.96 b: 0.96 alpha: 1.0)
		extension: 	a MorphExtension (78827008) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	0
		borderColor: 	#inset
		model: 	a RubTextScrollPane(336964096)
		slider: 	a BorderedMorph(507670528)
		value: 	0.0
		setValueSelector: 	#hScrollbarValue:
		sliderShadow: 	a BorderedMorph(922392064)
		sliderColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.8210000000...etc...
		descending: 	false
		upButton: 	a BorderedMorph(1036471296)
		downButton: 	a BorderedMorph(659998720)
		pagingArea: 	a Morph(466568192)
		scrollDelta: 	0
		pageDelta: 	0
		interval: 	1.0
		timeOfMouseDown: 	nil
		timeOfLastScroll: 	nil
		nextPageDirection: 	nil
		currentScrollDelay: 	nil
		lastPaneColor: 	(Color r: 0.8210000000000001 g: 0.8210000000000001 b: 0.82100000...etc...
		showState: 	#whenNeeded


RubTextScrollPane(GeneralScrollPane)>>hSetScrollDelta
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 
		pd: 	0
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>setScrollDeltas
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>updateScrollbars
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubTextScrollPane>>updateScrollbars
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubTextScrollPane(GeneralScrollPane)>>extent:
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 
		newExtent: 	(135.0@7.0)
		scrollbarChange: 	false
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubTextScrollPane>>extent:
	Receiver: a RubTextScrollPane(336964096)
	Arguments and temporary variables: 
		newExtent: 	(135.0@7.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a RubScrolledTextMorph(567515136)
		submorphs: 	an Array(a RubScrollBar(502951424) a TransformWithLayoutMorph(406795...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (612709376) [other:  (announcer -> an Announcer)]
		scroller: 	a TransformWithLayoutMorph(406795776)
		hScrollbar: 	a RubScrollBar(622927872)
		vScrollbar: 	a RubScrollBar(502951424)
		drawFocusBorder: 	true


RubScrolledTextMorph>>manageLayoutInBounds:
	Receiver: a RubScrolledTextMorph(567515136)
	Arguments and temporary variables: 
		aRectangle: 	(5.0@28.0) corner: (140.0@35.0)
		myBounds: 	(5.0@28.0) corner: (140.0@35.0)
		scrollpane: 	a RubTextScrollPane(336964096)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a PanelMorph(18260480)
		submorphs: 	an Array(a RubTextScrollPane(336964096) a RubAdornmentDisplayer(4449...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (677157888) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(336964096)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(444946432))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>manageLayout
	Receiver: a RubScrolledTextMorph(567515136)
	Arguments and temporary variables: 
		ret: 	nil
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a PanelMorph(18260480)
		submorphs: 	an Array(a RubTextScrollPane(336964096) a RubAdornmentDisplayer(4449...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (677157888) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(336964096)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(444946432))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>extent:
	Receiver: a RubScrolledTextMorph(567515136)
	Arguments and temporary variables: 
		aPoint: 	(135.0@7.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a PanelMorph(18260480)
		submorphs: 	an Array(a RubTextScrollPane(336964096) a RubAdornmentDisplayer(4449...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (677157888) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(336964096)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(444946432))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(Morph)>>bounds:
	Receiver: a RubScrolledTextMorph(567515136)
	Arguments and temporary variables: 
		newBounds: 	(5.0@28.0) corner: (140.0@35.0)
		oldExtent: 	(40.0@30.0)
		newExtent: 	(135.0@7.0)
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a PanelMorph(18260480)
		submorphs: 	an Array(a RubTextScrollPane(336964096) a RubAdornmentDisplayer(4449...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (677157888) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(336964096)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(444946432))
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph(Morph)>>layoutInBounds:
	Receiver: a RubScrolledTextMorph(567515136)
	Arguments and temporary variables: 
		cellBounds: 	(5@28) corner: (140@35)
		box: 	(5.0@28.0) corner: (140.0@35.0)
		aSymbol: 	#center
	Receiver's instance variables: 
		bounds: 	(5.0@28.0) corner: (140.0@35.0)
		owner: 	a PanelMorph(18260480)
		submorphs: 	an Array(a RubTextScrollPane(336964096) a RubAdornmentDisplayer(4449...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (677157888) [other:  (announcer -> an Announcer)]
		hasEditingConflicts: 	nil
		hasUnacceptedEdits: 	nil
		alwaysAccept: 	nil
		setTextSelector: 	nil
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	nil
		scrollPane: 	a RubTextScrollPane(336964096)
		rulers: 	a SortedCollection(a RubAdornmentDisplayer(444946432))
		enabled: 	true
		highlights: 	an OrderedCollection()


TableLayout>>layoutTopToBottom:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(18260480)
		newBounds: 	(5@28) corner: (140@35)
		inset: 	8
		extent: 	(135@7)
		block: 	[ :m | 
| sizeX props sizeY |
props := m layoutProperties ifNil: [ m ].
...etc...
		posX: 	5
		posY: 	28
		centering: 	nil
		extraPerCell: 	5.0
		amount: 	5
		minX: 	0
		minY: 	0
		maxX: 	1073741823
		maxY: 	1073741823
		sum: 	1
		first: 	a LayoutCell
		width: 	135
		vFill: 	true
		extra: 	5.0
		n: 	1
		last: 	0
		cell: 	a LayoutCell
		size: 	(2@2)
		height: 	7
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


TableLayout>>layout:in:
	Receiver: a TableLayout
	Arguments and temporary variables: 
		aMorph: 	a PanelMorph(18260480)
		box: 	(5.0@28.0) corner: (140.0@35.0)
		cells: 	nil
		arrangement: 	nil
		horizontal: 	nil
		newBounds: 	(5@28) corner: (140@35)
	Receiver's instance variables: 
		properties: 	a TableLayoutProperties
		minExtentCache: 	nil


PanelMorph(Morph)>>doLayoutIn:
	Receiver: a PanelMorph(18260480)
	Arguments and temporary variables: 
		layoutBounds: 	(5.0@28.0) corner: (140.0@35.0)
		box: 	nil
		priorBounds: 	(0.0@23.0) corner: (145.0@40.0)
		layout: 	a TableLayout
	Receiver's instance variables: 
		bounds: 	(0.0@23.0) corner: (145.0@40.0)
		owner: 	a LazyTabGroupMorph(959713280)
		submorphs: 	an Array(a RubScrolledTextMorph(567515136))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (182032896) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(18260480)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@23.0) corner: (145.0@40.0)
		owner: 	a LazyTabGroupMorph(959713280)
		submorphs: 	an Array(a RubScrolledTextMorph(567515136))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (182032896) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


BlockClosure>>on:do:
	Receiver: [ self doLayoutIn: self layoutBounds ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
"This should do it unless you don't screw up the bounds...etc...
	Receiver's instance variables: 
		outerContext: 	PanelMorph(Morph)>>computeFullBounds
		startpc: 	37
		numArgs: 	0


PanelMorph(Morph)>>computeFullBounds
	Receiver: a PanelMorph(18260480)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@23.0) corner: (145.0@40.0)
		owner: 	a LazyTabGroupMorph(959713280)
		submorphs: 	an Array(a RubScrolledTextMorph(567515136))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (182032896) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


PanelMorph(Morph)>>fullBounds
	Receiver: a PanelMorph(18260480)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0.0@23.0) corner: (145.0@40.0)
		owner: 	a LazyTabGroupMorph(959713280)
		submorphs: 	an Array(a RubScrolledTextMorph(567515136))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (182032896) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in LazyTabGroupMorph(Morph)>>submorphBounds
	Receiver: a LazyTabGroupMorph(959713280)
	Arguments and temporary variables: 
		m: 	a PanelMorph(18260480)
		subBox: 	nil
		box: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	a PanelMorph(989694976)
		submorphs: 	an Array(a PanelMorph(18260480) a PanelMorph(891232256))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (242619392)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(710180352)
		contentMorph: 	a PanelMorph(18260480)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(287598080))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(752745472)
		headerMorph: 	a PanelMorph(891232256)
		tabSelectorWidth: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PanelMorph(18260480) a PanelMorph(891232256))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
	...etc...
		index: 	1
	Receiver's instance variables: 
an Array(a PanelMorph(18260480) a PanelMorph(891232256))


--- The full stack ---
SmallInteger(Magnitude)>>min:
Rectangle>>intersect:ifNone:
PanelMorph(Morph)>>invalidRect:from:
PanelMorph(Morph)>>invalidRect:from:
LazyTabGroupMorph(Morph)>>invalidRect:from:
PanelMorph(Morph)>>invalidRect:from:
RubScrolledTextMorph(Morph)>>invalidRect:from:
RubTextScrollPane(Morph)>>invalidRect:from:
TransformWithLayoutMorph(Morph)>>invalidRect:from:
TransformWithLayoutMorph(TransformMorph)>>invalidRect:from:
TransformWithLayoutMorph(Morph)>>invalidRect:
TransformWithLayoutMorph(Morph)>>changed
TransformWithLayoutMorph(TransformMorph)>>offset:
RubTextScrollPane(GeneralScrollPane)>>hScrollbarValue:
[ super hScrollbarValue: scrollValue ] in RubTextScrollPane>>hScrollbarValue:
RubTextScrollPane>>handleScrollerOffsetChange:
RubTextScrollPane>>hScrollbarValue:
RubScrollBar(Slider)>>setValue:
RubScrollBar(GeneralScrollBar)>>setValue:
RubTextScrollPane(GeneralScrollPane)>>hSetScrollDelta
RubTextScrollPane(GeneralScrollPane)>>setScrollDeltas
RubTextScrollPane(GeneralScrollPane)>>updateScrollbars
RubTextScrollPane>>updateScrollbars
RubTextScrollPane(GeneralScrollPane)>>extent:
RubTextScrollPane>>extent:
RubScrolledTextMorph>>manageLayoutInBounds:
RubScrolledTextMorph>>manageLayout
RubScrolledTextMorph>>extent:
RubScrolledTextMorph(Morph)>>bounds:
RubScrolledTextMorph(Morph)>>layoutInBounds:
TableLayout>>layoutTopToBottom:in:
TableLayout>>layout:in:
PanelMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in LazyTabGroupMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
LazyTabGroupMorph(Morph)>>submorphBounds
LazyTabGroupMorph(Morph)>>privateFullBounds
LazyTabGroupMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in LazyTabGroupMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
LazyTabGroupMorph(Morph)>>computeFullBounds
LazyTabGroupMorph(Morph)>>fullBounds
[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in PanelMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphBounds
PanelMorph(Morph)>>privateFullBounds
PanelMorph(Morph)>>doLayoutIn:
[ self doLayoutIn: self layoutBounds ] in PanelMorph(Morph)>>computeFullBounds
BlockClosure>>on:do:
PanelMorph(Morph)>>computeFullBounds
PanelMorph(Morph)>>fullBounds
[ :m | 
| subBox |
m visible
	ifTrue: [ subBox := m fullBounds.
		box
			ifNil: [ box := subBox copy ]
			ifNotNil: [ box := box quickMerge: subBox ] ] ] in PanelMorph(Morph)>>submorphBounds
Array(SequenceableCollection)>>do:
PanelMorph(Morph)>>submorphBounds
PanelMorph(Morph)>>privateFullBounds
PanelMorph(Morph)>>changed
PanelMorph(BorderedMorph)>>borderStyle:
GLMSystemWindow(SystemWindow)>>addMorph:fullFrame:
GLMMorphicWindowRenderer>>render:
GLMMorphicWindowRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>open:
GTGenericStackDebugger(GLMCompositePresentation)>>openWith:
GTGenericStackDebugger(GLMCompositePresentation)>>open
GTGenericStackDebugger(GTMoldableDebugger)>>open
GTGenericStackDebugger>>openWithFullView
GTGenericStackDebugger class(GTMoldableDebugger class)>>openOn:withFullView:andNotification:
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ] in [ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSession signalDebuggerError: ex ] ] in MorphicUIManager>>debugProcess:context:label:fullView:notification:
BlockClosure>>on:do:
[ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSession signalDebuggerError: ex ] ] in MorphicUIManager>>debugProcess:context:label:fullView:notification:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:10.934773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

GlobalVariable(Object)>>isMemberOf:
	Receiver: #SlReporter->SlReporter
	Arguments and temporary variables: 
		aClass: 	CompiledBlock
	Receiver's instance variables: 
		key: 	#SlReporter
		value: 	SlReporter


CompiledMethod(CompiledCode)>>innerCompiledBlocksDo:
	Receiver: SlReportPreDebugAction>>#initialize
	Arguments and temporary variables: 
		aBlock: 	[ :cb | aSet := aSet , cb messages ]
		index: 	2
		lit: 	#SlReporter->SlReporter
	Receiver's instance variables: 
SlReportPreDebugAction>>#initialize

CompiledMethod(CompiledCode)>>messages
	Receiver: SlReportPreDebugAction>>#initialize
	Arguments and temporary variables: 
		aSet: 	an IdentitySet(#initialize #enabled: #enabled)
	Receiver's instance variables: 
SlReportPreDebugAction>>#initialize

CompiledMethod(CompiledCode)>>sendsSelector:
	Receiver: SlReportPreDebugAction>>#initialize
	Arguments and temporary variables: 
		aSymbol: 	#subclassResponsibility
	Receiver's instance variables: 
SlReportPreDebugAction>>#initialize

[ :cm | cm sendsSelector: #subclassResponsibility ] in SlReportPreDebugAction class(Behavior)>>hasAbstractMethods
	Receiver: SlReportPreDebugAction
	Arguments and temporary variables: 
		cm: 	SlReportPreDebugAction>>#initialize
	Receiver's instance variables: 
		superclass: 	PreDebugAction
		methodDict: 	a MethodDictionary(#appliesToDebugger:->SlReportPreDebugAction>>#ap...etc...
		format: 	65550
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SlReportPreDebugAction
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'ShoreLine-Report-UI-Actions'
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ] in Array(Collection)>>anySatisfy:
	Receiver: {SlReportPreDebugAction>>#defaultLabel. SlReportPreDebugAction>>#defaultOrder. SlReportPre...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
		each: 	SlReportPreDebugAction>>#initialize
	Receiver's instance variables: 
{SlReportPreDebugAction>>#defaultLabel. SlReportPreDebugAction>>#defaultOrder. SlReportPre...etc...

Array(SequenceableCollection)>>do:
	Receiver: {SlReportPreDebugAction>>#defaultLabel. SlReportPreDebugAction>>#defaultOrder. SlReportPre...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ true ] ]
		index: 	5
	Receiver's instance variables: 
{SlReportPreDebugAction>>#defaultLabel. SlReportPreDebugAction>>#defaultOrder. SlReportPre...etc...

Array(Collection)>>anySatisfy:
	Receiver: {SlReportPreDebugAction>>#defaultLabel. SlReportPreDebugAction>>#defaultOrder. SlReportPre...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :cm | cm sendsSelector: #subclassResponsibility ]
	Receiver's instance variables: 
{SlReportPreDebugAction>>#defaultLabel. SlReportPreDebugAction>>#defaultOrder. SlReportPre...etc...

SlReportPreDebugAction class(Behavior)>>hasAbstractMethods
	Receiver: SlReportPreDebugAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PreDebugAction
		methodDict: 	a MethodDictionary(#appliesToDebugger:->SlReportPreDebugAction>>#ap...etc...
		format: 	65550
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SlReportPreDebugAction
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'ShoreLine-Report-UI-Actions'
		traitComposition: 	{}
		localSelectors: 	nil


SlReportPreDebugAction class(Class)>>hasAbstractMethods
	Receiver: SlReportPreDebugAction
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PreDebugAction
		methodDict: 	a MethodDictionary(#appliesToDebugger:->SlReportPreDebugAction>>#ap...etc...
		format: 	65550
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SlReportPreDebugAction
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'ShoreLine-Report-UI-Actions'
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | each hasAbstractMethods ] in DebugSession class>>debuggingActionsForPragma:for:
	Receiver: DebugSession
	Arguments and temporary variables: 
		aSymbol: 	'gtCodeDebuggingAction'
		aDebugger: 	a GTGenericStackDebugger(id=214872064 title=User Interrupt pane=a GL...etc...
		each: 	SlReportPreDebugAction
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activePC:->DebugSession>>#activePC: #clear->Deb...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GTSUnitDebugSession. GTBytecodeDebuggerSession. ACDDebugSession. G...etc...
		name: 	#DebugSession
		classPool: 	a Dictionary(#LogDebuggerStackToFile->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DebuggerModel
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>reject:
	Receiver: an OrderedCollection(CopyToClipboardDebugAction DoesNotUnderstandDebugAction FullStackDebu...etc...
	Arguments and temporary variables: 
		rejectBlock: 	[ :each | each hasAbstractMethods ]
		newCollection: 	an OrderedCollection(CopyToClipboardDebugAction DoesNotUnderstan...etc...
		element: 	SlReportPreDebugAction
		index: 	69
	Receiver's instance variables: 
		array: 	{CopyToClipboardDebugAction. DoesNotUnderstandDebugAction. FullStackDebu...etc...
		firstIndex: 	1
		lastIndex: 	76


DebugSession class>>debuggingActionsForPragma:for:
	Receiver: DebugSession
	Arguments and temporary variables: 
		aSymbol: 	'gtCodeDebuggingAction'
		aDebugger: 	a GTGenericStackDebugger(id=214872064 title=User Interrupt pane=a GL...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activePC:->DebugSession>>#activePC: #clear->Deb...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GTSUnitDebugSession. GTBytecodeDebuggerSession. ACDDebugSession. G...etc...
		name: 	#DebugSession
		classPool: 	a Dictionary(#LogDebuggerStackToFile->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DebuggerModel
		traitComposition: 	{}
		localSelectors: 	nil


[ :currentActions :aSymbol | 
currentActions
	addAll: (self debuggingActionsForPragma: aSymbol for: aDebugger);
	yourself ] in DebugSession class>>debuggingActionsForPragmas:for:
	Receiver: DebugSession
	Arguments and temporary variables: 
		aSymbolsCollection: 	#('gtCodeDebuggingAction')
		aDebugger: 	a GTGenericStackDebugger(id=214872064 title=User Interrupt pane=a GL...etc...
		currentActions: 	an OrderedCollection()
		aSymbol: 	'gtCodeDebuggingAction'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activePC:->DebugSession>>#activePC: #clear->Deb...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GTSUnitDebugSession. GTBytecodeDebuggerSession. ACDDebugSession. G...etc...
		name: 	#DebugSession
		classPool: 	a Dictionary(#LogDebuggerStackToFile->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DebuggerModel
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | nextValue := binaryBlock value: nextValue value: each ] in Array(Collection)>>inject:into:
	Receiver: #('gtCodeDebuggingAction')
	Arguments and temporary variables: 
		thisValue: 	an OrderedCollection()
		binaryBlock: 	[ :currentActions :aSymbol | 
currentActions
	addAll: (self debugg...etc...
		nextValue: 	an OrderedCollection()
		each: 	'gtCodeDebuggingAction'
	Receiver's instance variables: 
#('gtCodeDebuggingAction')

Array(SequenceableCollection)>>do:
	Receiver: #('gtCodeDebuggingAction')
	Arguments and temporary variables: 
		aBlock: 	[ :each | nextValue := binaryBlock value: nextValue value: each ]
		index: 	1
	Receiver's instance variables: 
#('gtCodeDebuggingAction')

Array(Collection)>>inject:into:
	Receiver: #('gtCodeDebuggingAction')
	Arguments and temporary variables: 
		nextValue: 	an OrderedCollection()
		thisValue: 	an OrderedCollection()
		binaryBlock: 	[ :currentActions :aSymbol | 
currentActions
	addAll: (self debugg...etc...
	Receiver's instance variables: 
#('gtCodeDebuggingAction')

DebugSession class>>debuggingActionsForPragmas:for:
	Receiver: DebugSession
	Arguments and temporary variables: 
		aSymbolsCollection: 	#('gtCodeDebuggingAction')
		aDebugger: 	a GTGenericStackDebugger(id=214872064 title=User Interrupt pane=a GL...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activePC:->DebugSession>>#activePC: #clear->Deb...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{GTSUnitDebugSession. GTBytecodeDebuggerSession. ACDDebugSession. G...etc...
		name: 	#DebugSession
		classPool: 	a Dictionary(#LogDebuggerStackToFile->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#DebuggerModel
		traitComposition: 	{}
		localSelectors: 	nil


GTGenericStackDebugger(GTMoldableDebugger)>>allActionsForPragmas:
	Receiver: a GTGenericStackDebugger(id=214872064 title=User Interrupt pane=a GLMPane(750794752 root))...etc...
	Arguments and temporary variables: 
		aSymbolsCollection: 	#('gtCodeDebuggingAction')
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(750794752 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	(Color r: 1.0 g: 0.3 b: 0.3 alpha: 1.0)
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=928889856 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		selectedVariableName: 	nil


GTGenericStackDebugger(GTMoldableDebugger)>>actionsForPragmas:
	Receiver: a GTGenericStackDebugger(id=214872064 title=User Interrupt pane=a GLMPane(750794752 root))...etc...
	Arguments and temporary variables: 
		aSymbolsCollection: 	#('gtCodeDebuggingAction')
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(750794752 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	(Color r: 1.0 g: 0.3 b: 0.3 alpha: 1.0)
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=928889856 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		selectedVariableName: 	nil


[ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt , aSymbol capitalized ]) ] in GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRootPragmas:in:
	Receiver: a GTGenericStackDebugger(id=214872064 title=User Interrupt pane=a GLMPane(750794752 root))...etc...
	Arguments and temporary variables: 
		aSymbolsCollection: 	#(#codeDebuggingAction)
		aPresentation: 	a GLMPharoMethodPresentation(id=810095104 title=Source pane=a GL...etc...
		presentation: 	a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLM...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(750794752 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	(Color r: 1.0 g: 0.3 b: 0.3 alpha: 1.0)
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=928889856 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		selectedVariableName: 	nil


BlockClosure>>glamourValueWithArgs:
	Receiver: [ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt ...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMPharoMethodPresentation(id=698699776 title=Source pane=a...etc...
	Receiver's instance variables: 
		outerContext: 	GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRoot...etc...
		startpc: 	51
		numArgs: 	1


BlockClosure(ProtoObject)>>glamourValue:
	Receiver: [ :presentation | 
self
	actionsForPragmas: (aSymbolsCollection collect: [ :aSymbol | #gt ...etc...
	Arguments and temporary variables: 
		anObject: 	a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLMPane...etc...
		args: 	an Array(a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GL...etc...
	Receiver's instance variables: 
		outerContext: 	GTGenericStackDebugger(GTMoldableDebugger)>>installActionsForRoot...etc...
		startpc: 	51
		numArgs: 	1


GLMPharoMethodPresentation(GLMPresentation)>>dynamicActions
	Receiver: a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLMPane(607085568 code))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(607085568 code)
		title: 	'Source'
		titleIcon: 	nil
		transformation: 	[ :x | x ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMPharoMethodPresentation(id=810095104 title=Source pane=a ...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>pharoMethod
		initializationBlock: 	[ :code | 
code
	selectionInterval: (self session selected...etc...
		cachedDisplayedValue: 	SmallInteger(Magnitude)>>min:
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		format: 	[ aContext sourceCode ]
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	[ aContext receiver ]
		doItContext: 	[ aContext ]
		textBlock: 	nil
		selectedTextBlock: 	nil
		withLineNumbers: 	false
		withAnnotation: 	false
		wrapped: 	true
		tabWidth: 	nil
		withColumns: 	false
		textSegments: 	an OrderedCollection()
		primarySelectionInterval: 	nil
		highlightSmalltalkContext: 	[ aContext methodClass ]


GLMPharoMethodPresentation(GLMPresentation)>>allActions
	Receiver: a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLMPane(607085568 code))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(607085568 code)
		title: 	'Source'
		titleIcon: 	nil
		transformation: 	[ :x | x ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMPharoMethodPresentation(id=810095104 title=Source pane=a ...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>pharoMethod
		initializationBlock: 	[ :code | 
code
	selectionInterval: (self session selected...etc...
		cachedDisplayedValue: 	SmallInteger(Magnitude)>>min:
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		format: 	[ aContext sourceCode ]
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	[ aContext receiver ]
		doItContext: 	[ aContext ]
		textBlock: 	nil
		selectedTextBlock: 	nil
		withLineNumbers: 	false
		withAnnotation: 	false
		wrapped: 	true
		tabWidth: 	nil
		withColumns: 	false
		textSegments: 	an OrderedCollection()
		primarySelectionInterval: 	nil
		highlightSmalltalkContext: 	[ aContext methodClass ]


GLMPharoMethodPresentation(GLMPresentation)>>allActionsWithShortcuts
	Receiver: a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLMPane(607085568 code))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(607085568 code)
		title: 	'Source'
		titleIcon: 	nil
		transformation: 	[ :x | x ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMPharoMethodPresentation(id=810095104 title=Source pane=a ...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>pharoMethod
		initializationBlock: 	[ :code | 
code
	selectionInterval: (self session selected...etc...
		cachedDisplayedValue: 	SmallInteger(Magnitude)>>min:
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		format: 	[ aContext sourceCode ]
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	[ aContext receiver ]
		doItContext: 	[ aContext ]
		textBlock: 	nil
		selectedTextBlock: 	nil
		withLineNumbers: 	false
		withAnnotation: 	false
		wrapped: 	true
		tabWidth: 	nil
		withColumns: 	false
		textSegments: 	an OrderedCollection()
		primarySelectionInterval: 	nil
		highlightSmalltalkContext: 	[ aContext methodClass ]


GLMMorphicPharoMethodRenderer(GLMMorphicWidgetRenderer)>>installKeystrokeActionsOnMorph:fromPresentation:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aMorph: 	a RubEditingArea(342953472)
		aPresentation: 	a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GL...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(176657408)
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GL...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(176657408)
		textModel: 	a GLMRubricSmalltalkTextModel


GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GL...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicPharoCodeRenderer
		methodDict: 	a MethodDictionary(#methodBindingsStrategy->GLMMorphicPharoMethodRe...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicPharoMethodRenderer
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderPharoMethodPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aSmalltalkMethodPresentation: 	a GLMPharoMethodPresentation(id=698699776 title=S...etc...
	Receiver's instance variables: 
		window: 	nil


GLMPharoMethodPresentation>>renderGlamorouslyOn:
	Receiver: a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLMPane(607085568 code))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(607085568 code)
		title: 	'Source'
		titleIcon: 	nil
		transformation: 	[ :x | x ]
		actions: 	an OrderedCollection()
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMPharoMethodPresentation(id=810095104 title=Source pane=a ...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>pharoMethod
		initializationBlock: 	[ :code | 
code
	selectionInterval: (self session selected...etc...
		cachedDisplayedValue: 	SmallInteger(Magnitude)>>min:
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		format: 	[ aContext sourceCode ]
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	[ aContext receiver ]
		doItContext: 	[ aContext ]
		textBlock: 	nil
		selectedTextBlock: 	nil
		withLineNumbers: 	false
		withAnnotation: 	false
		wrapped: 	true
		tabWidth: 	nil
		withColumns: 	false
		textSegments: 	an OrderedCollection()
		primarySelectionInterval: 	nil
		highlightSmalltalkContext: 	[ aContext methodClass ]


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLMP...etc...
	Receiver's instance variables: 
		window: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLMPane...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(757694976)


[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		index: 	1
		aPresentation: 	a GLMCompositePresentation(id=5193728 title=nil pane=a GLMPane(6...etc...
		presentations: 	an OrderedCollection(a GLMPharoMethodPresentation(id=698699776 t...etc...
		each: 	a GLMPharoMethodPresentation(id=698699776 title=Source pane=a GLMPane(607...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(757694976)


LazyTabPage>>actualPageMorph
	Receiver: a LazyTabPage(318436352)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (226736640)
		borderWidth: 	1
		borderColor: 	Color black
		actualPageMorph: 	nil
		labelMorph: 	'Source'
		lazyPageMorphCreation: 	[ self renderObject: each ]
		toolbar: 	a ToolDockingBarMorph(53512704)


LazyTabGroupMorph>>pageAt:
	Receiver: a LazyTabGroupMorph(757694976)
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (200@100)
		owner: 	nil
		submorphs: 	an Array(a PanelMorph(243619328) a PanelMorph(333008384))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (533287936)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(447873024)
		contentMorph: 	a PanelMorph(243619328)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(318436352))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(475492864)
		headerMorph: 	a PanelMorph(333008384)
		tabSelectorWidth: 	nil


LazyTabGroupMorph>>updatePageIndex:
	Receiver: a LazyTabGroupMorph(757694976)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:12.042773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

[ delaySemaphore wait ] in Delay>>wait
	Receiver: a Delay(20 msecs; 10 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore(a Process in [ delaySemaphore wait ] in Delay>>wait...etc...
		beingWaitedOn: 	true
		millisecondDelayDuration: 	20
		scheduler: 	a DelayExperimentalSpinScheduler
		schedulerResumptionTime: 	3660853992052773


BlockClosure>>ifCurtailed:
	Receiver: [ delaySemaphore wait ]
	Arguments and temporary variables: 
		aBlock: 	[ self unschedule ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	36
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(20 msecs; 7 msecs remaining)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delaySemaphore: 	a Semaphore(a Process in [ delaySemaphore wait ] in Delay>>wait...etc...
		beingWaitedOn: 	true
		millisecondDelayDuration: 	20
		scheduler: 	a DelayExperimentalSpinScheduler
		schedulerResumptionTime: 	3660853992052773


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		milliSecs: 	20
		wait: 	20
		wait2: 	20
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(186178048))(a DropList...etc...
		lastStepTime: 	41556635
		lastStepMessage: 	nil
		lastCycleTime: 	41556635
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(408806400)))
		lastAlarmTime: 	41556635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(186178048))(a DropList...etc...
		lastStepTime: 	41556635
		lastStepMessage: 	nil
		lastCycleTime: 	41556635
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(408806400)))
		lastAlarmTime: 	41556635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(757209088) a GL...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	Color white
		extension: 	a MorphExtension (403932672) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ delaySemaphore wait ] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:12.236773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

PanelMorph(Morph)>>referencePositionInWorld:
	Receiver: a PanelMorph(449835520)
	Arguments and temporary variables: 
		aPoint: 	(1658.5@428.0)
		localPosition: 	nil
	Receiver's instance variables: 
		bounds: 	(815.0@313.0) corner: (2502.0@543.0)
		owner: 	a PanelMorph(890960384)
		submorphs: 	an Array(a FTTableMorph(1045202944))
		fullBounds: 	(815@313) corner: (2502@543)
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (310176768) [sticky] 
		borderWidth: 	0
		borderColor: 	Color black


PanelMorph(Morph)>>replaceSubmorph:by:
	Receiver: a PanelMorph(890960384)
	Arguments and temporary variables: 
		oldMorph: 	a PanelMorph(449835520)
		newMorph: 	a PanelMorph(449835520)
		index: 	1
		itsPosition: 	(1658.5@428.0)
		w: 	nil
	Receiver's instance variables: 
		bounds: 	(810.0@308.0) corner: (2507.0@548.0)
		owner: 	a LazyTabGroupMorph(488906240)
		submorphs: 	an Array(a PanelMorph(449835520))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (775276032) [sticky]  [other:  (roundedCorners -> #...etc...
		borderWidth: 	1
		borderColor: 	#tabbed


LazyTabGroupMorph>>updatePageIndex:
	Receiver: a LazyTabGroupMorph(488906240)
	Arguments and temporary variables: 
		index: 	1
		p: 	a PanelMorph(449835520)
		oldPage: 	a GLMTabLabelBrick(687778304)
		pageBounds: 	(815.0@313.0) corner: (2502.0@543.0)
	Receiver's instance variables: 
		bounds: 	(810.0@285.0) corner: (2507.0@548.0)
		owner: 	a PanelMorph(659757568)
		submorphs: 	an Array(a PanelMorph(890960384) a PanelMorph(17393664))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (278072320)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(640828928)
		contentMorph: 	a PanelMorph(890960384)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(781835776))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(938951680)
		headerMorph: 	a PanelMorph(17393664)
		tabSelectorWidth: 	nil


LazyTabGroupMorph>>updatePageAtIndex:withLabel:toolbar:action:
	Receiver: a LazyTabGroupMorph(488906240)
	Arguments and temporary variables: 
		anInteger: 	1
		aStringOrMorph: 	'Stack'
		aToolbar: 	a ToolDockingBarMorph(398130688)
		anActionMorph: 	nil
	Receiver's instance variables: 
		bounds: 	(810.0@285.0) corner: (2507.0@548.0)
		owner: 	a PanelMorph(659757568)
		submorphs: 	an Array(a PanelMorph(890960384) a PanelMorph(17393664))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (278072320)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(640828928)
		contentMorph: 	a PanelMorph(890960384)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(781835776))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(938951680)
		headerMorph: 	a PanelMorph(17393664)
		tabSelectorWidth: 	nil


[ :each :i | 
tabs
	updatePageAtIndex: i
	withLabel: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionMorphFor: each) ] in GLMMorphicTabbedRenderer>>actOnPresentationToolbarUpdated:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		ann: 	a GLMPresentationToolbarUpdated
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=897705472 tit...etc...
		each: 	a GLMFastTablePresentation(id=897705472 title=Stack pane=a GLMPane(593263...etc...
		i: 	1
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(488906240)


OrderedCollection(SequenceableCollection)>>withIndexDo:
	Receiver: an OrderedCollection(a GLMFastTablePresentation(id=897705472 title=Stack pane=a GLMPane(59...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :each :i | 
tabs
	updatePageAtIndex: i
	withLabel: (sel...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a GLMFastTablePresentation(id=897705472 title=Stack pane=a GLMP...etc...
		firstIndex: 	1
		lastIndex: 	1


GLMMorphicTabbedRenderer>>actOnPresentationToolbarUpdated:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		ann: 	a GLMPresentationToolbarUpdated
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=897705472 tit...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	a LazyTabGroupMorph(488906240)


MessageSend>>value:
	Receiver: MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicTabbedRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		receiver: 	a GLMMorphicTabbedRenderer
		selector: 	#actOnPresentationToolbarUpdated:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicTabbedRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		receiver: 	a GLMMorphicTabbedRenderer
		selector: 	#actOnPresentationToolbarUpdated:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicTabbedRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMPresentationToolbarUpdated
		arg2: 	a GLMCompositePresentation(id=262579200 title=nil pane=a GLMPane(59326361...etc...
	Receiver's instance variables: 
		receiver: 	a GLMMorphicTabbedRenderer
		selector: 	#actOnPresentationToolbarUpdated:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		announcer: 	a GLMCompositePresentation(id=262579200 title=nil pane=a GLMPane(593...etc...
		announcementClass: 	GLMPresentationToolbarUpdated
		subscriber: 	a GLMMorphicTabbedRenderer
		action: 	MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicTabbedRend...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		announcer: 	a GLMCompositePresentation(id=262579200 title=nil pane=a GLMPane(593...etc...
		announcementClass: 	GLMPresentationToolbarUpdated
		subscriber: 	a GLMMorphicTabbedRenderer
		action: 	MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicTabbedRend...etc...


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


GLMCompositePresentation(Announcer)>>announce:
	Receiver: a GLMCompositePresentation(id=262579200 title=nil pane=a GLMPane(593263616 stack))
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
		announcement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(593263616 stack)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=738892800 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=897705472 tit...etc...
		arrangement: 	a GLMTabbedArrangement


GLMCompositePresentation(GLMAnnouncer)>>announce:
	Receiver: a GLMCompositePresentation(id=262579200 title=nil pane=a GLMPane(593263616 stack))
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(593263616 stack)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=738892800 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=897705472 tit...etc...
		arrangement: 	a GLMTabbedArrangement


GLMCompositePresentation(GLMLoggedObject)>>announce:
	Receiver: a GLMCompositePresentation(id=262579200 title=nil pane=a GLMPane(593263616 stack))
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(593263616 stack)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=738892800 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=897705472 tit...etc...
		arrangement: 	a GLMTabbedArrangement


GLMCompositePresentation(GLMPresentation)>>updateToolbar
	Receiver: a GLMCompositePresentation(id=262579200 title=nil pane=a GLMPane(593263616 stack))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(593263616 stack)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=738892800 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMFastTablePresentation(id=897705472 tit...etc...
		arrangement: 	a GLMTabbedArrangement


[ (self browser paneNamed: #stack) presentations updateToolbar ] in GTGenericStackDebugger>>selectionChanged:
	Receiver: a GTGenericStackDebugger(id=142150144 title=User Interrupt pane=a GLMPane(596359680 root))...etc...
	Arguments and temporary variables: 
		aContext: 	[ delaySemaphore wait ] in Delay>>wait
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(596359680 root)
		title: 	'User Interrupt'
		titleIcon: 	nil
		transformation: 	nil
		actions: 	an OrderedCollection()
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas: (aSymbolsColle...etc...
		color: 	(Color r: 1.0 g: 0.3 b: 0.3 alpha: 1.0)
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	nil
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection()
		selectionDynamicActionsBlock: 	[ :presentation | 
self
	actionsForPragmas:
		(aS...etc...
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	nil
		initializationBlock: 	nil
		cachedDisplayedValue: 	nil
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection()
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		presentations: 	an OrderedCollection(a GLMTabulator(id=371305472 title=nil pane=...etc...
		arrangement: 	a GLMTabbedArrangement
		selectedVariableName: 	nil


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 3 items
		nextInQueue: 	[ (self browser paneNamed: #stack) presentations updateToolbar ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(186178048))(a DropList...etc...
		lastStepTime: 	41556635
		lastStepMessage: 	nil
		lastCycleTime: 	41556662
		alarms: 	a Heap()
		lastAlarmTime: 	41556635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(42819072) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (403932672) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(186178048))(a DropList...etc...
		lastStepTime: 	41556635
		lastStepMessage: 	nil
		lastCycleTime: 	41556662
		alarms: 	a Heap()
		lastAlarmTime: 	41556635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(186178048))(a DropList...etc...
		lastStepTime: 	41556635
		lastStepMessage: 	nil
		lastCycleTime: 	41556662
		alarms: 	a Heap()
		lastAlarmTime: 	41556635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(42819072) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (403932672) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
PanelMorph(Morph)>>referencePositionInWorld:
PanelMorph(Morph)>>replaceSubmorph:by:
LazyTabGroupMorph>>updatePageIndex:
LazyTabGroupMorph>>updatePageAtIndex:withLabel:toolbar:action:
[ :each :i | 
tabs
	updatePageAtIndex: i
	withLabel: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionMorphFor: each) ] in GLMMorphicTabbedRenderer>>actOnPresentationToolbarUpdated:
OrderedCollection(SequenceableCollection)>>withIndexDo:
GLMMorphicTabbedRenderer>>actOnPresentationToolbarUpdated:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
GLMCompositePresentation(Announcer)>>announce:
GLMCompositePresentation(GLMAnnouncer)>>announce:
GLMCompositePresentation(GLMLoggedObject)>>announce:
GLMCompositePresentation(GLMPresentation)>>updateToolbar
[ (self browser paneNamed: #stack) presentations updateToolbar ] in GTGenericStackDebugger>>selectionChanged:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:12.389773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

CompositionScanner(CharacterScanner)>>indentationLevel
	Receiver: a CompositionScanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	1
		xTable: 	nil
		map: 	nil
		destY: 	0
		stopConditions: 	#(nil #embeddedObject nil nil nil nil nil nil nil #tab #cr nil ...etc...
		text: 	a Text for 'a PanelMorph(449835520)'
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	9999999
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		line: 	a TextLine 1 to: 0
		runStopIndex: 	23
		spaceCount: 	0
		spaceWidth: 	2.600006103515625
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	0
		spaceIndex: 	nil
		lineHeight: 	17
		baseline: 	13
		lineHeightAtSpace: 	nil
		baselineAtSpace: 	nil
		lastBreakIsNotASpace: 	false
		nextIndexAfterLineBreak: 	0


CompositionScanner(CharacterScanner)>>handleIndentation
	Receiver: a CompositionScanner
	Arguments and temporary variables: 

	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	1
		xTable: 	nil
		map: 	nil
		destY: 	0
		stopConditions: 	#(nil #embeddedObject nil nil nil nil nil nil nil #tab #cr nil ...etc...
		text: 	a Text for 'a PanelMorph(449835520)'
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	9999999
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		line: 	a TextLine 1 to: 0
		runStopIndex: 	23
		spaceCount: 	0
		spaceWidth: 	2.600006103515625
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	0
		spaceIndex: 	nil
		lineHeight: 	17
		baseline: 	13
		lineHeightAtSpace: 	nil
		baselineAtSpace: 	nil
		lastBreakIsNotASpace: 	false
		nextIndexAfterLineBreak: 	0


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	1
		lineRectangle: 	(0@0) corner: (9999999@19)
		firstLine: 	true
		leftSide: 	true
		rightSide: 	true
		runLength: 	23
		stopCondition: 	nil
	Receiver's instance variables: 
		destX: 	0
		lastIndex: 	1
		xTable: 	nil
		map: 	nil
		destY: 	0
		stopConditions: 	#(nil #embeddedObject nil nil nil nil nil nil nil #tab #cr nil ...etc...
		text: 	a Text for 'a PanelMorph(449835520)'
		textStyle: 	a TextStyle Source Sans Pro
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	9999999
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		line: 	a TextLine 1 to: 0
		runStopIndex: 	23
		spaceCount: 	0
		spaceWidth: 	2.600006103515625
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	0
		spaceIndex: 	nil
		lineHeight: 	17
		baseline: 	13
		lineHeightAtSpace: 	nil
		baselineAtSpace: 	nil
		lastBreakIsNotASpace: 	false
		nextIndexAfterLineBreak: 	0


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@0) corner: (9999999@19)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	23
		deltaCharIndex: 	0
		theText: 	a Text for 'a PanelMorph(449835520)'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@0) corner: (9999999@19)}
		charIndexBeforeLine: 	1
		numberOfLinesBefore: 	0
		reasonForStopping: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	23
		deltaCharIndex: 	0
		theText: 	a Text for 'a PanelMorph(449835520)'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@0) corner: (9999999@19)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	23
		deltaCharIndex: 	0
		theText: 	a Text for 'a PanelMorph(449835520)'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	23
		deltaCharIndex: 	0
		theText: 	a Text for 'a PanelMorph(449835520)'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


TextComposer>>multiComposeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	23
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection()
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Source Sans Pro
		argText: 	a Text for 'a PanelMorph(449835520)'
		argContainer: 	(0@0) corner: (9999999@9999999)
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection()
		maxRightX: 	0
		currentY: 	0
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	1
		startCharIndex: 	1
		stopCharIndex: 	23
		deltaCharIndex: 	0
		theText: 	a Text for 'a PanelMorph(449835520)'
		theContainer: 	(0@0) corner: (9999999@9999999)
		isFirstLine: 	true
		theTextStyle: 	a TextStyle Source Sans Pro
		defaultLineHeight: 	19
		actualHeight: 	19
		wantsColumnBreaks: 	false


Paragraph>>multiComposeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a Paragraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	23
		delta: 	0
		lineColl: 	an OrderedCollection()
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for 'a PanelMorph(449835520)'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	22
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


Paragraph>>composeAll
	Receiver: a Paragraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'a PanelMorph(449835520)'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	22
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


Paragraph>>compose:style:from:in:
	Receiver: a Paragraph
	Arguments and temporary variables: 
		t: 	a Text for 'a PanelMorph(449835520)'
		ts: 	a TextStyle Source Sans Pro
		startingIndex: 	1
		textContainer: 	(0@0) corner: (9999999@9999999)
	Receiver's instance variables: 
		text: 	a Text for 'a PanelMorph(449835520)'
		textStyle: 	a TextStyle Source Sans Pro
		firstCharacterIndex: 	1
		container: 	(0@0) corner: (9999999@9999999)
		lines: 	nil
		positionWhenComposed: 	(0@0)
		offsetToEnd: 	22
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil
		composer: 	a TextComposer


TextMorph>>paragraph
	Receiver: a TextMorph(335127552)
	Arguments and temporary variables: 
		newParagraph: 	a Paragraph
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (320613376) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'a PanelMorph(449835520)'
		wrapFlag: 	false
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


TextMorph>>newContents:
	Receiver: a TextMorph(335127552)
	Arguments and temporary variables: 
		stringOrText: 	a Text for 'a PanelMorph(449835520)'
		newText: 	a Text for 'a PanelMorph(449835520)'
		embeddedMorphs: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (320613376) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'a PanelMorph(449835520)'
		wrapFlag: 	false
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


TextMorph>>contentsAsIs:
	Receiver: a TextMorph(335127552)
	Arguments and temporary variables: 
		stringOrText: 	a Text for 'a PanelMorph(449835520)'
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (320613376) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'a PanelMorph(449835520)'
		wrapFlag: 	false
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


Text>>asTextMorph
	Receiver: a Text for 'a PanelMorph(449835520)'
	Arguments and temporary variables: 

	Receiver's instance variables: 
		string: 	'a PanelMorph(449835520)'
		runs: 	a RunArray runs: #(23) values: #(#())


Text>>asMorph
	Receiver: a Text for 'a PanelMorph(449835520)'
	Arguments and temporary variables: 

	Receiver's instance variables: 
		string: 	'a PanelMorph(449835520)'
		runs: 	a RunArray runs: #(23) values: #(#())


GLMTreeMorphNodeModel>>rowMorphForColumn:
	Receiver: a NodeModel with 'self'->a PanelMorph(449835520)
	Arguments and temporary variables: 
		aGlamourColumn: 	a GLMTableColumn
		rowElements: 	nil
		tagMorphs: 	nil
		contentMorph: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(NodeMorph(a NodeModel with 'self'->a PanelMorph(4...etc...
		announceur: 	nil
		item: 	'self'->a PanelMorph(449835520)
		model: 	nil
		parentNode: 	nil
		contents: 	nil
		containerTree: 	a GLMTreeMorphModel
		onSelection: 	nil


GLMMorphTreeColumn>>rowMorphFor:
	Receiver: a GLMMorphTreeColumn
	Arguments and temporary variables: 
		aNodeMorph: 	a NodeModel with 'self'->a PanelMorph(449835520)
		rowMorph: 	nil
		cont: 	nil
	Receiver's instance variables: 
		header: 	a MorphTreeColumnButton(862099456)
		container: 	a GLMPaginatedResizableMorphTreeMorph(233921536)
		currentWidth: 	200
		rowMorphGetSelector: 	nil
		shrinkWrap: 	nil
		color: 	nil
		isPotentialDropTarget: 	nil
		resizable: 	nil
		glamourColumn: 	a GLMTableColumn


[ :col | 
| v |
v := col rowMorphFor: complexContents.
controls add: v.
col -> v ] in MorphTreeNodeMorph>>buildRowMorph
	Receiver: NodeMorph(a NodeModel with 'self'->a PanelMorph(449835520))
	Arguments and temporary variables: 
		rowControls: 	nil
		colAndControls: 	nil
		col: 	a GLMMorphTreeColumn
		v: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (554202624)
		parent: 	nil
		index: 	nil
		indentLevel: 	0
		isExpanded: 	false
		complexContents: 	a NodeModel with 'self'->a PanelMorph(449835520)
		firstChild: 	nil
		container: 	a GLMPaginatedResizableMorphTreeMorph(233921536)
		nextSibling: 	nil
		controls: 	an OrderedCollection(a Morph(847457792) a Morph(41579520))
		lineColor: 	nil
		selected: 	nil


OrderedCollection>>collect:
	Receiver: an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMorphTreeColumn)
	Arguments and temporary variables: 
		aBlock: 	[ :col | 
| v |
v := col rowMorphFor: complexContents.
controls add: v....etc...
		newCollection: 	an OrderedCollection(a GLMMorphTreeColumn->a Morph(847457792) a ...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMorphTreeColumn)...etc...
		firstIndex: 	1
		lastIndex: 	3


MorphTreeNodeMorph>>buildRowMorph
	Receiver: NodeMorph(a NodeModel with 'self'->a PanelMorph(449835520))
	Arguments and temporary variables: 
		rowControls: 	nil
		colAndControls: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (554202624)
		parent: 	nil
		index: 	nil
		indentLevel: 	0
		isExpanded: 	false
		complexContents: 	a NodeModel with 'self'->a PanelMorph(449835520)
		firstChild: 	nil
		container: 	a GLMPaginatedResizableMorphTreeMorph(233921536)
		nextSibling: 	nil
		controls: 	an OrderedCollection(a Morph(847457792) a Morph(41579520))
		lineColor: 	nil
		selected: 	nil


MorphTreeNodeMorph>>initRow
	Receiver: NodeMorph(a NodeModel with 'self'->a PanelMorph(449835520))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (554202624)
		parent: 	nil
		index: 	nil
		indentLevel: 	0
		isExpanded: 	false
		complexContents: 	a NodeModel with 'self'->a PanelMorph(449835520)
		firstChild: 	nil
		container: 	a GLMPaginatedResizableMorphTreeMorph(233921536)
		nextSibling: 	nil
		controls: 	an OrderedCollection(a Morph(847457792) a Morph(41579520))
		lineColor: 	nil
		selected: 	nil


MorphTreeNodeMorph>>initWithContents:prior:forList:indentLevel:
	Receiver: NodeMorph(a NodeModel with 'self'->a PanelMorph(449835520))
	Arguments and temporary variables: 
		anObject: 	a NodeModel with 'self'->a PanelMorph(449835520)
		priorMorph: 	nil
		hostList: 	a GLMPaginatedResizableMorphTreeMorph(233921536)
		newLevel: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (554202624)
		parent: 	nil
		index: 	nil
		indentLevel: 	0
		isExpanded: 	false
		complexContents: 	a NodeModel with 'self'->a PanelMorph(449835520)
		firstChild: 	nil
		container: 	a GLMPaginatedResizableMorphTreeMorph(233921536)
		nextSibling: 	nil
		controls: 	an OrderedCollection(a Morph(847457792) a Morph(41579520))
		lineColor: 	nil
		selected: 	nil


[ :item :idx | 
priorMorph := self indentingItemClass new
	initWithContents: item
	prior: priorMorph
	forList: self
	indentLevel: newIndent.
firstAddition ifNil: [ firstAddition := priorMorph ].
morphList add: priorMorph.
"Was this row expanded ? if true -> expand it
			again "
((item hasEquivalentIn: expandedItems) or: [ priorMorph isExpanded ])
	ifTrue: [ priorMorph isExpanded: true.
		priorMorph
			addChildrenForList: self
			addingTo: morphList
			withExpandedItems: expandedItems ] ] in GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addMorphsTo:from:withExpandedItems:atLevel:
	Receiver: a GLMPaginatedResizableMorphTreeMorph(233921536)
	Arguments and temporary variables: 
		morphList: 	an OrderedCollection()
		aCollection: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(4498355...etc...
		expandedItems: 	#()
		newIndent: 	0
		priorMorph: 	nil
		firstAddition: 	nil
		item: 	a NodeModel with 'self'->a PanelMorph(449835520)
		idx: 	1
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(895344640) a ScrollBar(643207680) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1033073152) [other:  (announcer -> an Announcer) (...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(643207680)
		scroller: 	a MorphTreeTransformMorph(4269056)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(895344640)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(458936320) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(655746048)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520)...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(241511936)
		stopStepping: 	nil


OrderedCollection(SequenceableCollection)>>withIndexDo:
	Receiver: an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520) a NodeModel with #aP...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :item :idx | 
priorMorph := self indentingItemClass new...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a NodeModel with 'self'->a PanelMorph(449835520) a NodeModel wi...etc...
		firstIndex: 	1
		lastIndex: 	13


OrderedCollection(SequenceableCollection)>>doWithIndex:
	Receiver: an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520) a NodeModel with #aP...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :item :idx | 
priorMorph := self indentingItemClass new...etc...
	Receiver's instance variables: 
		array: 	an Array(a NodeModel with 'self'->a PanelMorph(449835520) a NodeModel wi...etc...
		firstIndex: 	1
		lastIndex: 	13


GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addMorphsTo:from:withExpandedItems:atLevel:
	Receiver: a GLMPaginatedResizableMorphTreeMorph(233921536)
	Arguments and temporary variables: 
		priorMorph: 	nil
		firstAddition: 	nil
		morphList: 	an OrderedCollection()
		aCollection: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(4498355...etc...
		expandedItems: 	#()
		newIndent: 	0
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(895344640) a ScrollBar(643207680) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1033073152) [other:  (announcer -> an Announcer) (...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(643207680)
		scroller: 	a MorphTreeTransformMorph(4269056)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(895344640)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(458936320) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(655746048)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520)...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(241511936)
		stopStepping: 	nil


GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addSubmorphsFromNodeList:previouslyExpanded:
	Receiver: a GLMPaginatedResizableMorphTreeMorph(233921536)
	Arguments and temporary variables: 
		aNodeList: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520...etc...
		expandedNodeList: 	#()
		morphList: 	an OrderedCollection()
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(895344640) a ScrollBar(643207680) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1033073152) [other:  (announcer -> an Announcer) (...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(643207680)
		scroller: 	a MorphTreeTransformMorph(4269056)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(895344640)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(458936320) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(655746048)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520)...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(241511936)
		stopStepping: 	nil


GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>addSubmorphsFromNodeList
	Receiver: a GLMPaginatedResizableMorphTreeMorph(233921536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(895344640) a ScrollBar(643207680) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1033073152) [other:  (announcer -> an Announcer) (...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(643207680)
		scroller: 	a MorphTreeTransformMorph(4269056)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(895344640)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(458936320) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(655746048)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520)...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(241511936)
		stopStepping: 	nil


GLMPaginatedResizableMorphTreeMorph(MorphTreeMorph)>>buildContents
	Receiver: a GLMPaginatedResizableMorphTreeMorph(233921536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(895344640) a ScrollBar(643207680) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1033073152) [other:  (announcer -> an Announcer) (...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(643207680)
		scroller: 	a MorphTreeTransformMorph(4269056)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(895344640)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(458936320) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(655746048)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520)...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(241511936)
		stopStepping: 	nil


GLMPaginatedResizableMorphTreeMorph(PaginatedMorphTreeMorph)>>buildContents
	Receiver: a GLMPaginatedResizableMorphTreeMorph(233921536)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a ScrollBar(895344640) a ScrollBar(643207680) a MorphTreeCh...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1033073152) [other:  (announcer -> an Announcer) (...etc...
		borderWidth: 	1
		borderColor: 	#inset
		model: 	a GLMTreeMorphModel
		scrollBar: 	a ScrollBar(643207680)
		scroller: 	a MorphTreeTransformMorph(4269056)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(895344640)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
		potentialDropMorph: 	nil
		rowInset: 	1
		columnInset: 	3
		columnResizers: 	an OrderedCollection(a MorphTreeResizerMorph(458936320) a Morph...etc...
		withHLines: 	nil
		preferedPaneColor: 	Color white
		indentGap: 	nil
		expandedToggleImage: 	nil
		notExpandedToggleImage: 	nil
		resizerWidth: 	3
		gapAfterToggle: 	nil
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(655746048)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(a NodeModel with 'self'->a PanelMorph(449835520)...etc...
		iconBlock: 	nil
		treeLineWidth: 	nil
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	nil
		maxNodeWidth: 	nil
		enabled: 	nil
		pager: 	a MorphTreeChunkPager(241511936)
		stopStepping: 	nil


GLMMorphicTableRenderer(GLMMorphicListingRenderer)>>treeMorphFor:and:
	Receiver: a GLMMorphicTableRenderer
	Arguments and temporary variables: 
		tmpTreeModel: 	a GLMTreeMorphModel
		aPresentation: 	a GLMTablePresentation(id=185577472 title=nil pane=a GLMPane(854...etc...
		tmpTreeMorph: 	a GLMPaginatedResizableMorphTreeMorph(233921536)
		columns: 	an OrderedCollection(a GLMMorphTreeColumn a GLMMorphTreeColumn a GLMMo...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		treeMorph: 	nil
		treeModel: 	a GLMTreeMorphModel


GLMMorphicTableRenderer(GLMMorphicListingRenderer)>>render:
	Receiver: a GLMMorphicTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTablePresentation(id=185577472 title=nil pane=a GLMPane(854...etc...
		container: 	a PanelMorph(664836608)
		textInput: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		treeMorph: 	nil
		treeModel: 	a GLMTreeMorphModel


GLMMorphicTableRenderer>>render:
	Receiver: a GLMMorphicTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTablePresentation(id=185577472 title=nil pane=a GLMPane(854...etc...
		container: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		treeMorph: 	nil
		treeModel: 	a GLMTreeMorphModel


GLMMorphicTableRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTableRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTablePresentation(id=185577472 title=nil pane=a GLMPane(854...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicListingRenderer
		methodDict: 	a MethodDictionary(#newTreeMorph->GLMMorphicTableRenderer>>#newTree...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#GLMMorphicTableRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTablePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTablePresentation(id=185577472 title=nil pane=a GLMPane(854...etc...
	Receiver's instance variables: 
		window: 	nil


GLMTablePresentation>>renderGlamorouslyOn:
	Receiver: a GLMTablePresentation(id=185577472 title=nil pane=a GLMPane(854852608 variables))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		suspendedAnnouncemets: 	an OrderedCollection()
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(854852608 variables)
		title: 	nil
		titleIcon: 	nil
		transformation: 	[ :context | self variablesFromContext: context ]
		actions: 	nil
		condition: 	[ true ]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMTablePresentation(id=525182464 title=nil pane=a GLMPane(5...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	an OrderedCollection(a GLMMorphicAction a GLMMorphicAction)
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	an IdentitySet(GLMTransmission (origins=an OrderedCo...etc...
		statusPane: 	nil
		sourceLink: 	GLMCompositePresentation>>table
		initializationBlock: 	nil
		cachedDisplayedValue: 	an OrderedCollection('self'->a PanelMorph(449835520) #aPo...etc...
		labelActionBlock: 	nil
		portChangeActions: 	an OrderedCollection(a GLMPortChangeAction)
		wantsSteps: 	nil
		stepTime: 	nil
		stepCondition: 	nil
		format: 	nil
		icon: 	[ nil ]
		searchBlock: 	nil
		filterBlock: 	nil
		amountToShowBlock: 	50
		allowsMultipleSelection: 	false
		allowsDeselection: 	false
		tagsStyle: 	#grayRoundedButton
		helpMessage: 	nil
		sortBlock: 	nil
		textBackgroundColor: 	nil
		dropOnItemBlock: 	nil
		allowDropOnItemBlock: 	nil
		allowItemDragBlock: 	nil
		transformDraggedItemBlock: 	nil
		allowsRecursiveSearch: 	false
		columns: 	an OrderedCollection(a GLMTableColumn a GLMTableColumn a GLMTableColum...etc...
		children: 	THERE_BE_DRAGONS_HERE
User Interrupt
3 January 2017 12:53:12.576773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand...etc...
		startpc: 	34
		numArgs: 	0


RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #lineIndexOfCharacterIndex:
	Receiver: a RubShoutStylerDecorator
	Arguments and temporary variables: 
		aMessage: 	lineIndexOfCharacterIndex: 1
	Receiver's instance variables: 
		next: 	a RubCurrentLineBarDecorator
		styler: 	a RubSHTextStylerST80
		shoutIsAvailable: 	nil
		text: 	a Text for 'indentationLevel
	"return the number of tabs that are current...etc...
		replaceStart: 	1
		replaceStop: 	136


RubPrimarySelectionMorph(RubTextSegmentMorph)>>lineIndexOfCharacterIndex:
	Receiver: a RubPrimarySelectionMorph(418730496)
	Arguments and temporary variables: 
		anIndex: 	1
	Receiver's instance variables: 
		bounds: 	(6@6) corner: (6@25)
		owner: 	a RubEditingArea(251467264)
		submorphs: 	#()
		fullBounds: 	(6@6) corner: (6@25)
		color: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (166251520) [other:  (announcer -> an Announcer)]
		vertices: 	an OrderedCollection((6@25) (6@6))
		filledForm: 	nil
		smoothCurve: 	false
		curveState: 	nil
		borderForm: 	nil
		borderColor: 	nil
		borderWidth: 	nil
		textArea: 	a RubEditingArea(251467264)
		firstIndex: 	1
		lastIndex: 	1
		icon: 	nil
		iconBlock: 	nil
		label: 	nil
		changeable: 	false


RubPrimarySelectionMorph(RubTextSegmentMorph)>>computeStraightVertices
	Receiver: a RubPrimarySelectionMorph(418730496)
	Arguments and temporary variables: 
		firstCB: 	a CharacterBlock with index 1 and surface (6.0@6) corner: (13.80000305...etc...
		lastCB: 	a CharacterBlock with index 1 and surface (6.0@6) corner: (13.800003051...etc...
		firstLineIndex: 	nil
		lastLineIndex: 	nil
		firstLine: 	nil
		lastLine: 	nil
		verts: 	nil
		secondLine: 	nil
		thirdLine: 	nil
	Receiver's instance variables: 
		bounds: 	(6@6) corner: (6@25)
		owner: 	a RubEditingArea(251467264)
		submorphs: 	#()
		fullBounds: 	(6@6) corner: (6@25)
		color: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (166251520) [other:  (announcer -> an Announcer)]
		vertices: 	an OrderedCollection((6@25) (6@6))
		filledForm: 	nil
		smoothCurve: 	false
		curveState: 	nil
		borderForm: 	nil
		borderColor: 	nil
		borderWidth: 	nil
		textArea: 	a RubEditingArea(251467264)
		firstIndex: 	1
		lastIndex: 	1
		icon: 	nil
		iconBlock: 	nil
		label: 	nil
		changeable: 	false


RubPrimarySelectionMorph(RubTextSegmentMorph)>>computeVertices
	Receiver: a RubPrimarySelectionMorph(418730496)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(6@6) corner: (6@25)
		owner: 	a RubEditingArea(251467264)
		submorphs: 	#()
		fullBounds: 	(6@6) corner: (6@25)
		color: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (166251520) [other:  (announcer -> an Announcer)]
		vertices: 	an OrderedCollection((6@25) (6@6))
		filledForm: 	nil
		smoothCurve: 	false
		curveState: 	nil
		borderForm: 	nil
		borderColor: 	nil
		borderWidth: 	nil
		textArea: 	a RubEditingArea(251467264)
		firstIndex: 	1
		lastIndex: 	1
		icon: 	nil
		iconBlock: 	nil
		label: 	nil
		changeable: 	false


RubPrimarySelectionMorph(RubTextSegmentMorph)>>whenExtentChanged:
	Receiver: a RubPrimarySelectionMorph(418730496)
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
	Receiver's instance variables: 
		bounds: 	(6@6) corner: (6@25)
		owner: 	a RubEditingArea(251467264)
		submorphs: 	#()
		fullBounds: 	(6@6) corner: (6@25)
		color: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		extension: 	a MorphExtension (166251520) [other:  (announcer -> an Announcer)]
		vertices: 	an OrderedCollection((6@25) (6@6))
		filledForm: 	nil
		smoothCurve: 	false
		curveState: 	nil
		borderForm: 	nil
		borderColor: 	nil
		borderWidth: 	nil
		textArea: 	a RubEditingArea(251467264)
		firstIndex: 	1
		lastIndex: 	1
		icon: 	nil
		iconBlock: 	nil
		label: 	nil
		changeable: 	false


MessageSend>>value:
	Receiver: MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(418730496))
	Arguments and temporary variables: 
		anObject: 	a RubExtentChanged
	Receiver's instance variables: 
		receiver: 	a RubPrimarySelectionMorph(418730496)
		selector: 	#whenExtentChanged:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(418730496))
	Arguments and temporary variables: 
		arg: 	a RubExtentChanged
	Receiver's instance variables: 
		receiver: 	a RubPrimarySelectionMorph(418730496)
		selector: 	#whenExtentChanged:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(418730496))
	Arguments and temporary variables: 
		arg1: 	a RubExtentChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a RubPrimarySelectionMorph(418730496)
		selector: 	#whenExtentChanged:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubExtentChanged
		subscriber: 	a RubPrimarySelectionMorph(418730496)
		action: 	MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(418730496...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubExtentChanged
		subscriber: 	a RubPrimarySelectionMorph(418730496)
		action: 	MessageSend(#whenExtentChanged: -> a RubPrimarySelectionMorph(418730496...etc...


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a RubExtentChanged
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
		announcement: 	a RubExtentChanged
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(RubAbstractTextArea)>>announce:
	Receiver: a RubEditingArea(251467264)
	Arguments and temporary variables: 
		anAnnouncement: 	a RubExtentChanged
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (736@69)
		owner: 	a TransformWithLayoutMorph(244675072)
		submorphs: 	an Array(a RubCursor(900255744) a RubPrimarySelectionMorph(418730496...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (502785024) [other:  (announcer -> an Announcer)]
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1037250048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(900255744)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	false
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>handleBoundsChange:
	Receiver: a RubEditingArea(251467264)
	Arguments and temporary variables: 
		aBlock: 	[ self wrapped
	ifTrue: [ self updateBottomFromParagraph ]
	ifFalse: [ ...etc...
		oldBounds: 	(0@0) corner: (44@31)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (736@69)
		owner: 	a TransformWithLayoutMorph(244675072)
		submorphs: 	an Array(a RubCursor(900255744) a RubPrimarySelectionMorph(418730496...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (502785024) [other:  (announcer -> an Announcer)]
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1037250048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(900255744)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	false
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>paragraphWasComposedFrom:to:
	Receiver: a RubEditingArea(251467264)
	Arguments and temporary variables: 
		startIndex: 	1
		stopIndex: 	136
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (736@69)
		owner: 	a TransformWithLayoutMorph(244675072)
		submorphs: 	an Array(a RubCursor(900255744) a RubPrimarySelectionMorph(418730496...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (502785024) [other:  (announcer -> an Announcer)]
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1037250048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	nil
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(900255744)
		segments: 	nil
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	false
		editorClass: 	RubSmalltalkEditor


[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedCollection new
	priorLines: Array new
	atY: self compositionRectangle top.
textArea
	ifNotNil: [ textArea paragraphWasComposedFrom: 1 to: self text size ] ] in RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'indentationLevel
	"return the number of tabs that are current...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (18.0@27.0)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(251467264)


BlockClosure>>ensure:
	Receiver: [ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedC...etc...
	Arguments and temporary variables: 
		aBlock: 	[ self enableDrawing ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RubParagraph>>compose
		startpc: 	58
		numArgs: 	0


RubParagraph>>disableDrawingWhile:
	Receiver: a RubParagraph
	Arguments and temporary variables: 
		aBlock: 	[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta...etc...
	Receiver's instance variables: 
		text: 	a Text for 'indentationLevel
	"return the number of tabs that are current...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (18.0@27.0)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(251467264)


RubParagraph>>compose
	Receiver: a RubParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for 'indentationLevel
	"return the number of tabs that are current...etc...
		composer: 	a RubTextComposer
		container: 	(0@0) corner: (18.0@27.0)
		drawingEnabled: 	false
		textArea: 	a RubEditingArea(251467264)


Message>>sendTo:
	Receiver: compose
	Arguments and temporary variables: 
		receiver: 	a RubParagraph
	Receiver's instance variables: 
		selector: 	#compose
		args: 	#()
		lookupClass: 	RubOpeningClosingDelimiterDecorator


[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubParagraph


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesN...etc...
		startpc: 	34
		numArgs: 	0


RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubOpeningClosingDelimiterDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubParagraph


Message>>sendTo:
	Receiver: compose
	Arguments and temporary variables: 
		receiver: 	a RubOpeningClosingDelimiterDecorator
	Receiver's instance variables: 
		selector: 	#compose
		args: 	#()
		lookupClass: 	RubExtraSelectionDecorator


[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	34
		numArgs: 	0


RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubExtraSelectionDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubOpeningClosingDelimiterDecorator
		findReplaceRanges: 	nil
		findReplaceShapes: 	nil
		secondarySelectionShapes: 	nil


Message>>sendTo:
	Receiver: compose
	Arguments and temporary variables: 
		receiver: 	a RubExtraSelectionDecorator
	Receiver's instance variables: 
		selector: 	#compose
		args: 	#()
		lookupClass: 	RubCurrentLineBarDecorator


[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


BlockClosure>>on:do:
	Receiver: [ aMessage sendTo: next ]
	Arguments and temporary variables: 
		exception: 	MessageNotUnderstood
		handlerAction: 	[ super doesNotUnderstand: aMessage ]
	Receiver's instance variables: 
		outerContext: 	RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderst...etc...
		startpc: 	34
		numArgs: 	0


RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
	Receiver: a RubCurrentLineBarDecorator
	Arguments and temporary variables: 
		aMessage: 	compose
	Receiver's instance variables: 
		next: 	a RubExtraSelectionDecorator


Message>>sendTo:
	Receiver: compose
	Arguments and temporary variables: 
		receiver: 	a RubCurrentLineBarDecorator
	Receiver's instance variables: 
		selector: 	#compose
		args: 	#()
		lookupClass: 	RubShoutStylerDecorator



--- The full stack ---
BlockClosure>>on:do:
RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #lineIndexOfCharacterIndex:
RubPrimarySelectionMorph(RubTextSegmentMorph)>>lineIndexOfCharacterIndex:
RubPrimarySelectionMorph(RubTextSegmentMorph)>>computeStraightVertices
RubPrimarySelectionMorph(RubTextSegmentMorph)>>computeVertices
RubPrimarySelectionMorph(RubTextSegmentMorph)>>whenExtentChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
RubEditingArea(RubAbstractTextArea)>>handleBoundsChange:
RubEditingArea(RubAbstractTextArea)>>paragraphWasComposedFrom:to:
[ self uptodateComposer
	composeLinesFrom: 1
	to: self text size
	delta: 0
	into: OrderedCollection new
	priorLines: Array new
	atY: self compositionRectangle top.
textArea
	ifNotNil: [ textArea paragraphWasComposedFrom: 1 to: self text size ] ] in RubParagraph>>compose
BlockClosure>>ensure:
RubParagraph>>disableDrawingWhile:
RubParagraph>>compose
Message>>sendTo:
[ aMessage sendTo: next ] in RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
BlockClosure>>on:do:
RubOpeningClosingDelimiterDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
Message>>sendTo:
[ aMessage sendTo: next ] in RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
BlockClosure>>on:do:
RubExtraSelectionDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
Message>>sendTo:
[ aMessage sendTo: next ] in RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
BlockClosure>>on:do:
RubCurrentLineBarDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
Message>>sendTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ aMessage sendTo: next ] in RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
BlockClosure>>on:do:
RubShoutStylerDecorator(RubParagraphDecorator)>>doesNotUnderstand: #compose
RubEditingArea(RubAbstractTextArea)>>compose
RubEditingArea(RubAbstractTextArea)>>handleParagraphChange:
RubEditingArea(RubAbstractTextArea)>>setTextWith:
RubTextScrollPane>>setTextWith:
RubScrolledTextMorph>>setTextWith:
RubScrolledTextMorph>>model:
GLMMorphicPharoMethodRenderer>>morph
GLMMorphicPharoMethodRenderer(GLMMorphicRubricTextRenderer)>>render:
GLMMorphicPharoMethodRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPharoMethodPresentation:
GLMPharoMethodPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ self renderObject: each ] in [ :each | 
tabs
	addLazyPage: [ self renderObject: each ]
	label: (self titleOrIconOf: each in: tabs)
	toolbar: (self renderToolbarForPresentation: each inMorph: tabs)
	action: (self labelActionBrickFor: each) ] in GLMMorphicTabbedRenderer>>render:
LazyTabPage>>actualPageMorph
LazyTabGroupMorph>>pageAt:
LazyTabGroupMorph>>updatePageIndex:
LazyTabGroupMorph(TabGroupMorph)>>update:
LazyTabGroupMorph(Object)>>update:with:
MorphChangedWithArguments>>deliverTo:
LazyTabGroupMorph(Morph)>>handleUpdate:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
GLMTabSelectorBrick(Morph)>>doAnnounce:
GLMTabSelectorBrick(Morph)>>changed:with:
GLMTabSelectorBrick>>selectedIndex:
LazyTabGroupMorph(TabGroupMorph)>>selectedPageIndex:
[ tabs selectedPageIndex: index ] in GLMMorphicTabbedRenderer>>render:
BlockClosure>>ensure:
GLMAnnouncer>>suspendAllWhile:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>render:
GLMMorphicPaneRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderPane:
GLMPane>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabulatorRenderer(GLMMorphicWidgetRenderer)>>renderObject:
[ :index :each | 
each hasId
	ifTrue: [ pane := self renderObject: (aBrowser paneNamed: each id) ]
	ifFalse: [ pane := GLMMorphic containerMorph.
		self
			renderCustomRow: each
			ofPane: aPane
			inUI: pane
			inBrowser: aBrowser.
		pane addPaneSplitters ].
pane
	layoutFrame:
		(LayoutFrame new
			topFraction: currentSpanPosition / totalSpans
				offset: currentOffset + self margin;
			leftFraction: 0 offset: 0;
			bottomFraction: (currentSpanPosition + each span) / totalSpans
				offset: currentOffset + each size - self margin;
			rightFraction: 1 offset: 0;
			yourself).
aMorph addMorphBack: pane.
currentSpanPosition := currentSpanPosition + each span.
currentOffset := currentOffset + each size ] in GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
OrderedCollection(SequenceableCollection)>>keysAndValuesDo:
GLMMorphicTabulatorRenderer>>renderCustomColumn:ofPane:inUI:inBrowser:
GLMMorphicTabulatorRenderer>>render:
GLMMorphicTabulatorRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabulator:
GLMTabulator>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GTGenericStackDebugger(GLMCompositePresentation)>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicWindowRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicWindowRenderer>>render:
GLMMorphicWindowRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>open:
GTGenericStackDebugger(GLMCompositePresentation)>>openWith:
GTGenericStackDebugger(GLMCompositePresentation)>>open
GTGenericStackDebugger(GTMoldableDebugger)>>open
GTGenericStackDebugger>>openWithFullView
GTGenericStackDebugger class(GTMoldableDebugger class)>>openOn:withFullView:andNotification:
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ] in [ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSession signalDebuggerError: ex ] ] in MorphicUIManager>>debugProcess:context:label:fullView:notification:
BlockClosure>>on:do:
[ "schedule debugger in deferred UI message to address
			redraw problems after opening a debugger e.g. from
			the testrunner."
[ Smalltalk tools debugger
	openOn: debugSession
	withFullView: bool
	andNotification: notificationString ]
	on: Error
	do: [ :ex | debugSession signalDebuggerError: ex ] ] in MorphicUIManager>>debugProcess:context:label:fullView:notification:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
3 January 2017 12:53:23.013773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection(SequenceableCollection)>>first
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


GLMTabLabelBrick(Morph)>>firstSubmorph
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


GLMTabLabelBrick>>label
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


[ (self label layout maxWidth brickValue: self label)
	min: self owner width ] in GLMTabLabelBrick>>select
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


BlockClosure>>cull:
	Receiver: [ (self label layout maxWidth brickValue: self label)
	min: self owner width ]
	Arguments and temporary variables: 
		anArg: 	a GLMBrickWrapper
	Receiver's instance variables: 
		outerContext: 	GLMTabLabelBrick>>select
		startpc: 	64
		numArgs: 	0


BlockClosure>>brickValue:
	Receiver: [ (self label layout maxWidth brickValue: self label)
	min: self owner width ]
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
		outerContext: 	GLMTabLabelBrick>>select
		startpc: 	64
		numArgs: 	0


GLMHorizontalLinearLayout(GLMLinearLayout)>>normalizeWidth:of:
	Receiver: a GLMHorizontalLinearLayout
	Arguments and temporary variables: 
		anInteger: 	847
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMHorizontalLinearLayout

GLMBrickLayoutParentState>>updateWidth:on:
	Receiver: a GLMBrickLayoutParentState
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aLayout: 	a GLMHorizontalLinearLayout
	Receiver's instance variables: 
		percent: 	100


GLMHorizontalLinearLayout(GLMLinearLayout)>>updateWidth:
	Receiver: a GLMHorizontalLinearLayout
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMHorizontalLinearLayout

GLMBrickWidthTraverser>>updateDimension:
	Receiver: a GLMBrickWidthTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickWidthTraverser

GLMBrickLayoutParentState>>layout:on:
	Receiver: a GLMBrickLayoutParentState
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aTraverser: 	a GLMBrickWidthTraverser
	Receiver's instance variables: 
		percent: 	100


GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>layoutAround:inContext:
	Receiver: a GLMBrickWidthTraverser
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
		aContextBrick: 	nil
	Receiver's instance variables: 
a GLMBrickWidthTraverser

GLMBrickLayouter>>layout:
	Receiver: a GLMBrickLayouter
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickLayouter

GLMBrickLayouter>>layoutIn:
	Receiver: a GLMBrickLayouter
	Arguments and temporary variables: 
		aBrick: 	a GLMBrickWrapper
	Receiver's instance variables: 
a GLMBrickLayouter

GLMTabLabelBrick(GLMBrick)>>doLayout
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


GLMTabLabelBrick(GLMBrick)>>doLayoutForce
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


GLMTabLabelBrick(GLMBrick)>>removeAllBricks
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 
		copy: 	an OrderedCollection(a GLMBrick(997809152))
	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


GLMTabLabelBrick>>beSelected
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


GLMTabLabelBrick>>selected:
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 
		aBoolean: 	true
	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


GLMTabLabelBrick>>label:selected:
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 
		aBrick: 	a GLMBrick(119232000)
		aSelectedBrick: 	a GLMBrick(119232000)
	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


GLMTabLabelBrick>>label:
	Receiver: a GLMTabLabelBrick(482375168)
	Arguments and temporary variables: 
		aBrick: 	a GLMBrick(119232000)
	Receiver's instance variables: 
		bounds: 	(1315.0@198.0) corner: (1365.0@238.0)
		owner: 	a GLMBrick(622524416)
		submorphs: 	an OrderedCollection()
		fullBounds: 	nil
		color: 	(Color r: 0.794 g: 0.868 b: 0.9400000000000001 alpha: 1.0)
		extension: 	a MorphExtension (941886976) [other:  (brickRenderer -> a GLMInterac...etc...
		brickBounds: 	a GLMBrickBounds
		brickApi: 	a GLMBrickWrapper
		normalImage: 	nil
		pressedImage: 	nil
		selectedImage: 	nil
		checkedImage: 	nil
		announcer: 	nil
		checkedColor: 	nil
		normalColor: 	nil
		pressedColor: 	nil
		selectedColor: 	nil
		isSelected: 	false
		isPressed: 	false
		isChecked: 	false
		isEnabled: 	true
		isDoubleClickEnabled: 	nil
		tabSelector: 	a GLMTabSelectorBrick(228064256)
		normalLabel: 	a GLMBrick(119232000)
		selectedLabel: 	a GLMBrick(119232000)


GLMTabSelectorBrick>>relabelTab:with:
	Receiver: a GLMTabSelectorBrick(228064256)
	Arguments and temporary variables: 
		aTab: 	a GLMTabLabelBrick(482375168)
		aStringOrBrick: 	a GLMBrick(119232000)
	Receiver's instance variables: 
		bounds: 	(1315.0@214.0) corner: (2162.0@238.0)
		owner: 	a PanelMorph(895145472)
		submorphs: 	an Array(a GLMBrick(622524416))
		fullBounds: 	(1315.0@214.0) corner: (2162.0@238.0)
		color: 	Color transparent
		extension: 	a MorphExtension (971604992) [other:  (minHeight -> 24) (announcer -...etc...
		brickRoot: 	a GLMBrick(622524416)
		vResizing: 	#spaceFill
		hResizing: 	#spaceFill
		selectedIndex: 	1
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		tabs: 	an OrderedCollection(a GLMTabLabelBrick(482375168))


LazyTabGroupMorph(TabGroupMorph)>>relabelPage:with:
	Receiver: a LazyTabGroupMorph(244003328)
	Arguments and temporary variables: 
		aMorph: 	a LazyTabPage(1062723584)
		aStringOrMorph: 	a GLMBrick(119232000)
	Receiver's instance variables: 
		bounds: 	(1315.0@214.0) corner: (2186.0@1232.0)
		owner: 	a PanelMorph(347672576)
		submorphs: 	an Array(a PanelMorph(655938048) a PanelMorph(895145472))
		fullBounds: 	(1315.0@214.0) corner: (2186.0@1232.0)
		color: 	Color transparent
		extension: 	a MorphExtension (574313472)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(228064256)
		contentMorph: 	a PanelMorph(655938048)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(1062723584))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(625032704)
		headerMorph: 	a PanelMorph(895145472)
		tabSelectorWidth: 	nil


LazyTabGroupMorph>>updatePageAtIndex:withLabel:toolbar:action:
	Receiver: a LazyTabGroupMorph(244003328)
	Arguments and temporary variables: 
		anInteger: 	1
		aStringOrMorph: 	'an Element'
		aToolbar: 	a ToolDockingBarMorph(508929536)
		anActionMorph: 	a GLMActionButtonBrick(155106304)
	Receiver's instance variables: 
		bounds: 	(1315.0@214.0) corner: (2186.0@1232.0)
		owner: 	a PanelMorph(347672576)
		submorphs: 	an Array(a PanelMorph(655938048) a PanelMorph(895145472))
		fullBounds: 	(1315.0@214.0) corner: (2186.0@1232.0)
		color: 	Color transparent
		extension: 	a MorphExtension (574313472)
		borderWidth: 	0
		borderColor: 	Color yellow
		model: 	nil
		tabSelectorMorph: 	a GLMTabSelectorBrick(228064256)
		contentMorph: 	a PanelMorph(655938048)
		pageMorphs: 	an OrderedCollection(a LazyTabPage(1062723584))
		announcer: 	a GLMAnnouncer
		toolbarMorph: 	a PanelMorph(625032704)
		headerMorph: 	a PanelMorph(895145472)
		tabSelectorWidth: 	nil


GLMMorphicPaneRenderer>>actOnPresentationToolbarUpdated:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
		presentation: 	a GLMCompositePresentation(id=470685696 title=an Element pane=a G...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(347672576)
		contentMorph: 	a LazyTabGroupMorph(244003328)


MessageSend>>value:
	Receiver: MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicPaneRenderer)
	Arguments and temporary variables: 
		anObject: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPaneRenderer
		selector: 	#actOnPresentationToolbarUpdated:
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicPaneRenderer)
	Arguments and temporary variables: 
		arg: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPaneRenderer
		selector: 	#actOnPresentationToolbarUpdated:
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicPaneRenderer)
	Arguments and temporary variables: 
		arg1: 	a GLMPresentationToolbarUpdated
		arg2: 	a GLMPane(559012864 3)
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPaneRenderer
		selector: 	#actOnPresentationToolbarUpdated:
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		announcer: 	a GLMPane(559012864 3)
		announcementClass: 	GLMPresentationToolbarUpdated
		subscriber: 	a GLMMorphicPaneRenderer
		action: 	MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicPaneRender...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		announcer: 	a GLMPane(559012864 3)
		announcementClass: 	GLMPresentationToolbarUpdated
		subscriber: 	a GLMMorphicPaneRenderer
		action: 	MessageSend(#actOnPresentationToolbarUpdated: -> a GLMMorphicPaneRender...etc...


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a GLMPresentationToolbarUpdated
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a GLMPresentationToolbarUpdated
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>at:
OrderedCollection(SequenceableCollection)>>first
GLMTabLabelBrick(Morph)>>firstSubmorph
GLMTabLabelBrick>>label
[ (self label layout maxWidth brickValue: self label)
	min: self owner width ] in GLMTabLabelBrick>>select
BlockClosure>>cull:
BlockClosure>>brickValue:
GLMHorizontalLinearLayout(GLMLinearLayout)>>normalizeWidth:of:
GLMBrickLayoutParentState>>updateWidth:on:
GLMHorizontalLinearLayout(GLMLinearLayout)>>updateWidth:
GLMBrickWidthTraverser>>updateDimension:
GLMBrickLayoutParentState>>layout:on:
GLMBrickWidthTraverser(GLMBrickLayoutTraverser)>>layoutAround:inContext:
GLMBrickLayouter>>layout:
GLMBrickLayouter>>layoutIn:
GLMTabLabelBrick(GLMBrick)>>doLayout
GLMTabLabelBrick(GLMBrick)>>doLayoutForce
GLMTabLabelBrick(GLMBrick)>>removeAllBricks
GLMTabLabelBrick>>beSelected
GLMTabLabelBrick>>selected:
GLMTabLabelBrick>>label:selected:
GLMTabLabelBrick>>label:
GLMTabSelectorBrick>>relabelTab:with:
LazyTabGroupMorph(TabGroupMorph)>>relabelPage:with:
LazyTabGroupMorph>>updatePageAtIndex:withLabel:toolbar:action:
GLMMorphicPaneRenderer>>actOnPresentationToolbarUpdated:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMPane(Announcer)>>announce:
GLMPane(GLMAnnouncer)>>announce:
GLMPane(GLMLoggedObject)>>announce:
GLMPane>>updateToolbar
GTInspector>>removeLastPane
[ self removeLastPane ] in GTInspector>>closeActionFor:
BlockClosure>>glamourValueWithArgs:
GLMGenericAction(GLMAction)>>actOn:
[ labelAction actOn: aPresentation ] in GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>labelActionBrickFor:
BlockClosure>>valueWithEnoughArguments:
BlockClosure>>brickValue:withEnoughArguments:
GLMActionButtonBrick>>click:
GLMActionButtonBrick(GLMInteractableBrick)>>mouseUp:
GLMActionButtonBrick(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
GLMActionButtonBrick(Morph)>>handleEvent:
GLMActionButtonBrick(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: CommandParserFactory>>parse:
3 January 2017 12:54:55.213773 am

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

CommandParserFactory(Object)>>doesNotUnderstand: #parse:
	Receiver: a CommandParserFactory
	Arguments and temporary variables: 
		aMessage: 	parse: '@jehu { sad:asd;
ajsd:123; }'
		exception: 	MessageNotUnderstood: CommandParserFactory>>parse:
		resumeValue: 	nil
	Receiver's instance variables: 
		initializer: 	nil
		varName: 	nil
		arguments: 	a PPActionParser(417583616)
		key: 	a PPActionParser(473152512)


CommandParserFactory>>DoIt
	Receiver: a CommandParserFactory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		initializer: 	nil
		varName: 	nil
		arguments: 	a PPActionParser(417583616)
		key: 	a PPActionParser(473152512)


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self parse:''@jehu { sad:asd;
ajsd:123; }'''
		itsSelection: 	a Text for 'self parse:''@jehu { sad:asd;
ajsd:123; }'''
		itsSelectionString: 	'self parse:''@jehu { sad:asd;
ajsd:123; }'''
	Receiver's instance variables: 
		ast: 	DoIt
	^ self
		parse:
			'@jehu { sad:asd;
ajsd:123; }'
		source: 	a ReadStream
		context: 	nil
		receiver: 	a CommandParserFactory
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	a CommandParserFactory
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(663570432)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(663570432)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(438970368)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	41659794
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	41659808
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	41659794
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	41659808
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(688101376)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(84002816))(a SearchMorph...etc...
		lastStepTime: 	41659787
		lastStepMessage: 	nil
		lastCycleTime: 	41659808
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(688101376)))
		lastAlarmTime: 	41659787
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	41659808
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(84002816))(a SearchMorph...etc...
		lastStepTime: 	41659787
		lastStepMessage: 	nil
		lastCycleTime: 	41659808
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(688101376)))
		lastAlarmTime: 	41659787
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(84002816))(a SearchMorph...etc...
		lastStepTime: 	41659787
		lastStepMessage: 	nil
		lastCycleTime: 	41659808
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(688101376)))
		lastAlarmTime: 	41659787
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(701204992) a GL...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	Color white
		extension: 	a MorphExtension (403932672) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(84002816))(a SearchMorph...etc...
		lastStepTime: 	41659787
		lastStepMessage: 	nil
		lastCycleTime: 	41659808
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(688101376)))
		lastAlarmTime: 	41659787
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(853785088))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(84002816))(a SearchMorph...etc...
		lastStepTime: 	41659787
		lastStepMessage: 	nil
		lastCycleTime: 	41659808
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(688101376)))
		lastAlarmTime: 	41659787
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(853785088)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(701204992) a GL...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	Color white
		extension: 	a MorphExtension (403932672) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
CommandParserFactory(Object)>>doesNotUnderstand: #parse:
CommandParserFactory>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

