THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
2 January 2017 12:41:41.621 pm

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

Array(Object)>>errorSubscriptBounds:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
#()

Array(Object)>>at:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
#()

Array(SequenceableCollection)>>first
	Receiver: #()
	Arguments and temporary variables: 

	Receiver's instance variables: 
#()

[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	ifTrue: [ res size > 1
			ifTrue: [ finalSubResults
					add:
						(Element new
							name: '__ROOT__';
							children: res;
							weight: 0;
							yourself) ]
			ifFalse: [ finalSubResults add: res first ] ]
	ifFalse: [ (res isKindOf: Node)
			ifTrue: [ finalSubResults add: res ] ] ] in [ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueGene...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
		elt: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Ga...etc...
		res: 	#()
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(983078912) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(#() #() #() an Array(an Element an Element an Element an Element an E...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(#() #() #() an Array(an Element an Element an Element an Elemen...etc...
		firstIndex: 	1
		lastIndex: 	50


[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(an OrderedCollection(a RawText a RawText a RawTex...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(983078912) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		elt: 	' <?xml version="1.0"?>

 <!DOCTYPE PARTS SYSTEM "parts.dtd">

 <?xml-styl...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mf...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :elt | 
subResults := OrderedCollection new.
finalSubResults := Order...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	#('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mfr...etc...
		firstIndex: 	1
		lastIndex: 	2


ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(983078912) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(an OrderedCollection(a RawText a RawText a RawTex...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


SetValidator>>validate:correctParser:
	Receiver: a SetValidator
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

...etc...
		correctParser: 	a XMLFactoryParser(158632960)
		parsedInputs: 	nil
		correctlyParsedInputs: 	nil
		finalResults: 	nil
	Receiver's instance variables: 
		results: 	nil
		correctResult: 	nil


[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>microsecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
		initialMicroseconds: 	3660810096493000
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	49
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new valid...etc...
		itsSelection: 	a Text for 'solz:= OrderedCollection new.
[ 
solz:= SetValidator ...etc...
		itsSelectionString: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new v...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	solz := OrderedCollection new.
	^ [ solz := SetValidator new
		valid...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1168261
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1168275
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1168261
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1168275
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(366913024))(a SearchMorp...etc...
		lastStepTime: 	1168254
		lastStepMessage: 	nil
		lastCycleTime: 	1168275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1168254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1168275
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(366913024))(a SearchMorp...etc...
		lastStepTime: 	1168254
		lastStepMessage: 	nil
		lastCycleTime: 	1168275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1168254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(366913024))(a SearchMorp...etc...
		lastStepTime: 	1168254
		lastStepMessage: 	nil
		lastCycleTime: 	1168275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1168254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(366913024))(a SearchMorp...etc...
		lastStepTime: 	1168254
		lastStepMessage: 	nil
		lastCycleTime: 	1168275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1168254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(366913024))(a SearchMorp...etc...
		lastStepTime: 	1168254
		lastStepMessage: 	nil
		lastCycleTime: 	1168275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1168254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>first
[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	ifTrue: [ res size > 1
			ifTrue: [ finalSubResults
					add:
						(Element new
							name: '__ROOT__';
							children: res;
							weight: 0;
							yourself) ]
			ifFalse: [ finalSubResults add: res first ] ]
	ifFalse: [ (res isKindOf: Node)
			ifTrue: [ finalSubResults add: res ] ] ] in [ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
OrderedCollection>>do:
[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
OrderedCollection>>do:
ParserGenerator class>>parseSetWithOrder:
SetValidator>>validate:correctParser:
[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
Time class>>microsecondsToRun:
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
2 January 2017 12:42:29.323 pm

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

Array(Object)>>errorSubscriptBounds:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
#()

Array(Object)>>at:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
#()

Array(SequenceableCollection)>>first
	Receiver: #()
	Arguments and temporary variables: 

	Receiver's instance variables: 
#()

[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	ifTrue: [ res size > 1
			ifTrue: [ finalSubResults
					add:
						(Element new
							name: '__ROOT__';
							children: res;
							weight: 0;
							yourself) ]
			ifFalse: [ finalSubResults add: res first ] ]
	ifFalse: [ (res isKindOf: Node)
			ifTrue: [ finalSubResults add: res ] ] ] in [ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueGene...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
		elt: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Ga...etc...
		res: 	#()
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(278772736) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(#() #() #() an Array(an Element an Element an Element an Element an E...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(#() #() #() an Array(an Element an Element an Element an Elemen...etc...
		firstIndex: 	1
		lastIndex: 	50


[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(an OrderedCollection(a RawText a RawText a RawTex...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(278772736) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		elt: 	'<?xml version="1.0"?>

<!DOCTYPE PARTS SYSTEM "parts.dtd">

<?xml-stylesh...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mf...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :elt | 
subResults := OrderedCollection new.
finalSubResults := Order...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	#('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mfr...etc...
		firstIndex: 	1
		lastIndex: 	2


ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(278772736) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(an OrderedCollection(a RawText a RawText a RawTex...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


SetValidator>>validate:correctParser:
	Receiver: a SetValidator
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

...etc...
		correctParser: 	a XMLFactoryParser(601022720)
		parsedInputs: 	nil
		correctlyParsedInputs: 	nil
		finalResults: 	nil
	Receiver's instance variables: 
		results: 	nil
		correctResult: 	nil


[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>microsecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
		initialMicroseconds: 	3660810144664000
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	49
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new valid...etc...
		itsSelection: 	a Text for 'solz:= OrderedCollection new.
[ 
solz:= SetValidator ...etc...
		itsSelectionString: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new v...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	solz := OrderedCollection new.
	^ [ solz := SetValidator new
		valid...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(176693248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@468)
		owner: 	a TransformWithLayoutMorph(787813376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800890368) a RubCursor(245511680...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527648256) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(472743424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(245511680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(700592128))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(728418304))(a DropList...etc...
		lastStepTime: 	1216413
		lastStepMessage: 	nil
		lastCycleTime: 	1216434
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1216413
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(728418304))(a DropList...etc...
		lastStepTime: 	1216413
		lastStepMessage: 	nil
		lastCycleTime: 	1216434
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1216413
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(728418304))(a DropList...etc...
		lastStepTime: 	1216413
		lastStepMessage: 	nil
		lastCycleTime: 	1216434
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1216413
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>first
[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	ifTrue: [ res size > 1
			ifTrue: [ finalSubResults
					add:
						(Element new
							name: '__ROOT__';
							children: res;
							weight: 0;
							yourself) ]
			ifFalse: [ finalSubResults add: res first ] ]
	ifFalse: [ (res isKindOf: Node)
			ifTrue: [ finalSubResults add: res ] ] ] in [ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
OrderedCollection>>do:
[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
OrderedCollection>>do:
ParserGenerator class>>parseSetWithOrder:
SetValidator>>validate:correctParser:
[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
Time class>>microsecondsToRun:
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
2 January 2017 12:43:48.516 pm

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		parsers: 	an OrderedCollection(a PPActionParser(257967360) a PPActionParser(5412...etc...
		subResults: 	an OrderedCollection()
		finalSubResults: 	nil
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection()
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


SetValidator>>validate:correctParser:
	Receiver: a SetValidator
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

...etc...
		correctParser: 	a XMLFactoryParser(757920768)
		parsedInputs: 	nil
		correctlyParsedInputs: 	nil
		finalResults: 	nil
	Receiver's instance variables: 
		results: 	nil
		correctResult: 	nil


[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>microsecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
		initialMicroseconds: 	3660810227320000
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	49
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new valid...etc...
		itsSelection: 	a Text for 'solz:= OrderedCollection new.
[ 
solz:= SetValidator ...etc...
		itsSelectionString: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new v...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	solz := OrderedCollection new.
	^ [ solz := SetValidator new
		valid...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(176693248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@468)
		owner: 	a TransformWithLayoutMorph(787813376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800890368) a RubCursor(245511680...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527648256) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(472743424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(245511680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(578316544))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(770872832))(a SearchMorp...etc...
		lastStepTime: 	1299067
		lastStepMessage: 	nil
		lastCycleTime: 	1299088
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1299067
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Gro...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(770872832))(a SearchMorp...etc...
		lastStepTime: 	1299067
		lastStepMessage: 	nil
		lastCycleTime: 	1299088
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1299067
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(770872832))(a SearchMorp...etc...
		lastStepTime: 	1299067
		lastStepMessage: 	nil
		lastCycleTime: 	1299088
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1299067
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Gro...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ParserGenerator class>>parseSetWithOrder:
SetValidator>>validate:correctParser:
[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
Time class>>microsecondsToRun:
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
2 January 2017 12:47:00.3 pm

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		parsers: 	an OrderedCollection(a PPActionParser(821577728) a PPActionParser(7563...etc...
		subResults: 	an OrderedCollection()
		finalSubResults: 	nil
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection()
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


SetValidator>>validate:correctParser:
	Receiver: a SetValidator
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

...etc...
		correctParser: 	a XMLFactoryParser(757920768)
		parsedInputs: 	nil
		correctlyParsedInputs: 	nil
		finalResults: 	nil
	Receiver's instance variables: 
		results: 	nil
		correctResult: 	nil


[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>microsecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
		initialMicroseconds: 	3660810227320000
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	49
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new valid...etc...
		itsSelection: 	a Text for 'solz:= OrderedCollection new.
[ 
solz:= SetValidator ...etc...
		itsSelectionString: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new v...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	solz := OrderedCollection new.
	^ [ solz := SetValidator new
		valid...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(176693248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@468)
		owner: 	a TransformWithLayoutMorph(787813376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800890368) a RubCursor(245511680...etc...
		fullBounds: 	(0@0) corner: (567@468)
		color: 	Color transparent
		extension: 	a MorphExtension (527648256) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(472743424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(245511680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(578316544))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(445790208))(a DropList...etc...
		lastStepTime: 	1490765
		lastStepMessage: 	nil
		lastCycleTime: 	1490786
		alarms: 	a Heap()
		lastAlarmTime: 	1490765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GrowlMorph(558628864) a GLMSyst...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(445790208))(a DropList...etc...
		lastStepTime: 	1490765
		lastStepMessage: 	nil
		lastCycleTime: 	1490786
		alarms: 	a Heap()
		lastAlarmTime: 	1490765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(445790208))(a DropList...etc...
		lastStepTime: 	1490765
		lastStepMessage: 	nil
		lastCycleTime: 	1490786
		alarms: 	a Heap()
		lastAlarmTime: 	1490765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GrowlMorph(558628864) a GLMSyst...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ParserGenerator class>>parseSetWithOrder:
SetValidator>>validate:correctParser:
[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
Time class>>microsecondsToRun:
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
2 January 2017 12:47:07.42 pm

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
self halt.
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection()
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(435976448) [0, *] a...etc...
		subResults: 	an OrderedCollection(an Array(a RawText) an Array(a RawText) an Arr...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		elt: 	'<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mfr>

	...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mf...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :elt | 
subResults := OrderedCollection new.
finalSubResults := Order...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	#('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mfr...etc...
		firstIndex: 	1
		lastIndex: 	2


ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(435976448) [0, *] a...etc...
		subResults: 	an OrderedCollection(an Array(a RawText) an Array(a RawText) an Arr...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection()
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


SetValidator>>validate:correctParser:
	Receiver: a SetValidator
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

...etc...
		correctParser: 	a XMLFactoryParser(757920768)
		parsedInputs: 	nil
		correctlyParsedInputs: 	nil
		finalResults: 	nil
	Receiver's instance variables: 
		results: 	nil
		correctResult: 	nil


[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>microsecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
		initialMicroseconds: 	3660810227320000
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	49
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new valid...etc...
		itsSelection: 	a Text for 'solz:= OrderedCollection new.
[ 
solz:= SetValidator ...etc...
		itsSelectionString: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new v...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	solz := OrderedCollection new.
	^ [ solz := SetValidator new
		valid...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(176693248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@468)
		owner: 	a TransformWithLayoutMorph(787813376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800890368) a RubCursor(245511680...etc...
		fullBounds: 	(0@0) corner: (567@468)
		color: 	Color transparent
		extension: 	a MorphExtension (527648256) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(472743424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(245511680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(578316544))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81548288))(a SearchMorph...etc...
		lastStepTime: 	1498245
		lastStepMessage: 	nil
		lastCycleTime: 	1498266
		alarms: 	a Heap()
		lastAlarmTime: 	1498245
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81548288))(a SearchMorph...etc...
		lastStepTime: 	1498245
		lastStepMessage: 	nil
		lastCycleTime: 	1498266
		alarms: 	a Heap()
		lastAlarmTime: 	1498245
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(81548288))(a SearchMorph...etc...
		lastStepTime: 	1498245
		lastStepMessage: 	nil
		lastCycleTime: 	1498266
		alarms: 	a Heap()
		lastAlarmTime: 	1498245
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
self halt.
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
OrderedCollection>>do:
ParserGenerator class>>parseSetWithOrder:
SetValidator>>validate:correctParser:
[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
Time class>>microsecondsToRun:
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
2 January 2017 12:50:54.307 pm

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
self halt.
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(an OrderedCollection(a RawText a RawText a RawTex...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(435976448) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		elt: 	'<?xml version="1.0"?>

<!DOCTYPE PARTS SYSTEM "parts.dtd">

<?xml-stylesh...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mf...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :elt | 
subResults := OrderedCollection new.
finalSubResults := Order...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	#('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mfr...etc...
		firstIndex: 	1
		lastIndex: 	2


ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(435976448) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(an OrderedCollection(a RawText a RawText a RawTex...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


SetValidator>>validate:correctParser:
	Receiver: a SetValidator
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

...etc...
		correctParser: 	a XMLFactoryParser(757920768)
		parsedInputs: 	nil
		correctlyParsedInputs: 	nil
		finalResults: 	nil
	Receiver's instance variables: 
		results: 	nil
		correctResult: 	nil


[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>microsecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
		initialMicroseconds: 	3660810227320000
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	49
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new valid...etc...
		itsSelection: 	a Text for 'solz:= OrderedCollection new.
[ 
solz:= SetValidator ...etc...
		itsSelectionString: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new v...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	solz := OrderedCollection new.
	^ [ solz := SetValidator new
		valid...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(176693248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@468)
		owner: 	a TransformWithLayoutMorph(787813376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800890368) a RubCursor(245511680...etc...
		fullBounds: 	(0@0) corner: (567@468)
		color: 	Color transparent
		extension: 	a MorphExtension (527648256) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(472743424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(245511680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(578316544))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(141802496))(a SearchMorp...etc...
		lastStepTime: 	1723559
		lastStepMessage: 	nil
		lastCycleTime: 	1723581
		alarms: 	a Heap()
		lastAlarmTime: 	1723559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(141802496))(a SearchMorp...etc...
		lastStepTime: 	1723559
		lastStepMessage: 	nil
		lastCycleTime: 	1723581
		alarms: 	a Heap()
		lastAlarmTime: 	1723559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(141802496))(a SearchMorp...etc...
		lastStepTime: 	1723559
		lastStepMessage: 	nil
		lastCycleTime: 	1723581
		alarms: 	a Heap()
		lastAlarmTime: 	1723559
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
self halt.
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
OrderedCollection>>do:
ParserGenerator class>>parseSetWithOrder:
SetValidator>>validate:correctParser:
[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
Time class>>microsecondsToRun:
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
2 January 2017 12:51:59.579 pm

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		parsers: 	an OrderedCollection(a PPActionParser(45131008) a PPActionParser(70713...etc...
		subResults: 	an OrderedCollection()
		finalSubResults: 	nil
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection()
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


SetValidator>>validate:correctParser:
	Receiver: a SetValidator
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

...etc...
		correctParser: 	a XMLFactoryParser(674227200)
		parsedInputs: 	nil
		correctlyParsedInputs: 	nil
		finalResults: 	nil
	Receiver's instance variables: 
		results: 	nil
		correctResult: 	nil


[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>microsecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
		initialMicroseconds: 	3660810718144000
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	49
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new valid...etc...
		itsSelection: 	a Text for 'solz:= OrderedCollection new.
[ 
solz:= SetValidator ...etc...
		itsSelectionString: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new v...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	solz := OrderedCollection new.
	^ [ solz := SetValidator new
		valid...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(176693248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@468)
		owner: 	a TransformWithLayoutMorph(787813376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800890368) a RubCursor(245511680...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527648256) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(472743424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(245511680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(542308608))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(662090752))(a SearchMorp...etc...
		lastStepTime: 	1789891
		lastStepMessage: 	nil
		lastCycleTime: 	1789913
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1789891
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(662090752))(a SearchMorp...etc...
		lastStepTime: 	1789891
		lastStepMessage: 	nil
		lastCycleTime: 	1789913
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1789891
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(662090752))(a SearchMorp...etc...
		lastStepTime: 	1789891
		lastStepMessage: 	nil
		lastCycleTime: 	1789913
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1789891
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ParserGenerator class>>parseSetWithOrder:
SetValidator>>validate:correctParser:
[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
Time class>>microsecondsToRun:
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
2 January 2017 12:53:33.983 pm

VM: Win32 - IX86 - 6.2 - CoInterpreter VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
StackToRegisterMappingCogit VMMaker.oscog-eem.1855 uuid: d8e4a3c2-a3bf-4adc-b224-8012903a1ef4 May  4 2016
https://github.com/pharo-project/pharo-vm.git Commit: b8ec25a570d7539653e1d793e97609adb509aaed Date: 2016-05-04 11:14:22 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #589

Image: Pharo6.0 [Latest update: #60297]

Array(Object)>>errorSubscriptBounds:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
#()

Array(Object)>>at:
	Receiver: #()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
#()

Array(SequenceableCollection)>>first
	Receiver: #()
	Arguments and temporary variables: 

	Receiver's instance variables: 
#()

[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	ifTrue: [ res size > 1
			ifTrue: [ finalSubResults
					add:
						(Element new
							name: '__ROOT__';
							children: res;
							weight: 0;
							yourself) ]
			ifFalse: [ finalSubResults add: res first ] ]
	ifFalse: [ (res isKindOf: Node)
			ifTrue: [ finalSubResults add: res ] ] ] in [ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueGene...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
		elt: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Ga...etc...
		res: 	#()
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(762913792) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(#() #() #() an Array(an Element an Element an Element an Element an E...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(#() #() #() an Array(an Element an Element an Element an Elemen...etc...
		firstIndex: 	1
		lastIndex: 	50


[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(an OrderedCollection(a RawText a RawText a RawTex...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(762913792) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		elt: 	'<?xml version="1.0"?>

<!DOCTYPE PARTS SYSTEM "parts.dtd">

<?xml-stylesh...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mf...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :elt | 
subResults := OrderedCollection new.
finalSubResults := Order...etc...
		index: 	2
	Receiver's instance variables: 
		array: 	#('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>Gardenproducts</mfr...etc...
		firstIndex: 	1
		lastIndex: 	2


ParserGenerator class>>parseSetWithOrder:
	Receiver: ParserGenerator
	Arguments and temporary variables: 
		parsers: 	an OrderedCollection(a PPPossessiveRepeatingParser(762913792) [0, *] a...etc...
		subResults: 	an OrderedCollection(#() #() #() an Array(an Element an Element an ...etc...
		finalSubResults: 	an OrderedCollection()
		solutionsOfFirst: 	an OrderedCollection(an Element an Element an Element an Elem...etc...
		aSet: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

	<mfr>G...etc...
		generators: 	an OrderedCollection(BruteForceCommandGenerator BruteForceKeyValueG...etc...
		results: 	an OrderedCollection(an OrderedCollection(a RawText a RawText a RawTex...etc...
		solutionsOfFirstTmp: 	an OrderedCollection(an Element an Array(an Element) an Ar...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#,->ParserGenerator>>#, #/->ParserGenerator>>#/ ...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BruteForceCommandGenerator. BruteForceKeyValueGenerator. BruteForc...etc...
		name: 	#ParserGenerator
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'RecognisingStructuralPatterns-BruteForceGenerators'
		traitComposition: 	{}
		localSelectors: 	nil


SetValidator>>validate:correctParser:
	Receiver: a SetValidator
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection('<food>

	<name>Soy Patties, Grilled</name>

...etc...
		correctParser: 	a XMLFactoryParser(744208640)
		parsedInputs: 	nil
		correctlyParsedInputs: 	nil
		finalResults: 	nil
	Receiver's instance variables: 
		results: 	nil
		correctResult: 	nil


[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Time class>>microsecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
		initialMicroseconds: 	3660810809473000
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


Time class>>millisecondsToRun:
	Receiver: Time
	Arguments and temporary variables: 
		timedBlock: 	[ solz := SetValidator new
	validate: shorterFiles
	correctParser: ...etc...
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(#<->Time>>#< #=->Time>>#= #addSeconds:->Time>>#a...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Time
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(ChronologyConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Chronology'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>timeToRun
	Receiver: [ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	49
		numArgs: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new valid...etc...
		itsSelection: 	a Text for 'solz:= OrderedCollection new.
[ 
solz:= SetValidator ...etc...
		itsSelectionString: 	'solz:= OrderedCollection new.
[ 
solz:= SetValidator new v...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	solz := OrderedCollection new.
	^ [ solz := SetValidator new
		valid...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result inspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(176693248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(176693248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@468)
		owner: 	a TransformWithLayoutMorph(787813376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(800890368) a RubCursor(245511680...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (527648256) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(472743424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(245511680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(970921984))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(783508992)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(141802496))(a SearchMorp...etc...
		lastStepTime: 	1881221
		lastStepMessage: 	nil
		lastCycleTime: 	1881242
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1881221
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(141802496))(a SearchMorp...etc...
		lastStepTime: 	1881221
		lastStepMessage: 	nil
		lastCycleTime: 	1881242
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1881221
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1068105728))
		viewBox: 	(0@0) corner: (2544@1361)
		canvas: 	a FormCanvas on: DisplayScreen(2544x1361x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(141802496))(a SearchMorp...etc...
		lastStepTime: 	1881221
		lastStepMessage: 	nil
		lastCycleTime: 	1881242
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(245511680)))
		lastAlarmTime: 	1881221
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1068105728)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2544@1361)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(31518720) a Nau...etc...
		fullBounds: 	(0@0) corner: (2544@1361)
		color: 	Color white
		extension: 	a MorphExtension (1052640256) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(SequenceableCollection)>>first
[ :res | 
(res isKindOf: Collection) & (res asString = 'failure') not
	ifTrue: [ res size > 1
			ifTrue: [ finalSubResults
					add:
						(Element new
							name: '__ROOT__';
							children: res;
							weight: 0;
							yourself) ]
			ifFalse: [ finalSubResults add: res first ] ]
	ifFalse: [ (res isKindOf: Node)
			ifTrue: [ finalSubResults add: res ] ] ] in [ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
OrderedCollection>>do:
[ :elt | 
subResults := OrderedCollection new.
finalSubResults := OrderedCollection new.
parsers
	do: [ :parser | 
		subResults
			add:
				([ parser parse: elt ]
					valueWithin: 2000 milliSeconds
					onTimeout: #failure) ].
subResults
	do: [ :res | 
		(res isKindOf: Collection) & (res asString = 'failure') not
			ifTrue: [ res size > 1
					ifTrue: [ finalSubResults
							add:
								(Element new
									name: '__ROOT__';
									children: res;
									weight: 0;
									yourself) ]
					ifFalse: [ finalSubResults add: res first ] ]
			ifFalse: [ (res isKindOf: Node)
					ifTrue: [ finalSubResults add: res ] ] ].
results add: finalSubResults ] in ParserGenerator class>>parseSetWithOrder:
OrderedCollection>>do:
ParserGenerator class>>parseSetWithOrder:
SetValidator>>validate:correctParser:
[ solz := SetValidator new
	validate: shorterFiles
	correctParser: XMLFactoryParser new ] in UndefinedObject>>DoIt
Time class>>microsecondsToRun:
Time class>>millisecondsToRun:
BlockClosure>>timeToRun
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

